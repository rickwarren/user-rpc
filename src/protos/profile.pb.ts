// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/protos/profile.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface GetProfileResponseDto {
  profiles: Profile[];
}

export interface DeleteProfileResponseDto {
  success: boolean;
}

export interface OwnerId {
  id: string;
}

export interface EmptyProfile {}

export interface ProfileId {
  id: string;
}

export interface UpdateProfileDto {
  id: string;
  ownerId: string;
  firstName: string;
  lastName: string;
  dateOfBirth: string;
  profession: string;
  employer: string;
  dateHired: string;
  employmentStatus: string;
  relationshipStatus: string;
  profilePhoto: string;
  bannerImage: string;
  hometown: string;
  city: string;
  province: string;
  country: string;
  language: string;
  mobilePhone: string;
  visibility: string;
  createdAt: protoscript.Timestamp;
  updatedAt: protoscript.Timestamp;
}

export interface CreateProfileDto {
  ownerId: string;
  firstName: string;
  lastName: string;
  dateOfBirth: string;
  profession: string;
  employer: string;
  dateHired: string;
  employmentStatus: string;
  relationshipStatus: string;
  profilePhoto: string;
  bannerImage: string;
  hometown: string;
  city: string;
  province: string;
  country: string;
  language: string;
  mobilePhone: string;
  visibility: string;
}

export interface Profile {
  id: string;
  ownerId: string;
  firstName: string;
  lastName: string;
  dateOfBirth: string;
  profession: string;
  employer: string;
  dateHired: string;
  employmentStatus: string;
  relationshipStatus: string;
  profilePhoto: string;
  bannerImage: string;
  hometown: string;
  city: string;
  province: string;
  country: string;
  language: string;
  mobilePhone: string;
  visibility: string;
  createdAt: protoscript.Timestamp;
  updatedAt: protoscript.Timestamp;
}

//========================================//
//      ProfileProto Protobuf Client      //
//========================================//

export async function getProfiles(
  emptyProfile: EmptyProfile,
  config?: ClientConfiguration,
): Promise<GetProfileResponseDto> {
  const response = await PBrequest(
    "/ProfileProto/getProfiles",
    EmptyProfile.encode(emptyProfile),
    config,
  );
  return GetProfileResponseDto.decode(response);
}

export async function getProfile(
  ownerId: OwnerId,
  config?: ClientConfiguration,
): Promise<Profile> {
  const response = await PBrequest(
    "/ProfileProto/getProfile",
    OwnerId.encode(ownerId),
    config,
  );
  return Profile.decode(response);
}

export async function createProfile(
  createProfileDto: CreateProfileDto,
  config?: ClientConfiguration,
): Promise<Profile> {
  const response = await PBrequest(
    "/ProfileProto/createProfile",
    CreateProfileDto.encode(createProfileDto),
    config,
  );
  return Profile.decode(response);
}

export async function updateProfile(
  updateProfileDto: UpdateProfileDto,
  config?: ClientConfiguration,
): Promise<Profile> {
  const response = await PBrequest(
    "/ProfileProto/updateProfile",
    UpdateProfileDto.encode(updateProfileDto),
    config,
  );
  return Profile.decode(response);
}

export async function deleteProfile(
  profileId: ProfileId,
  config?: ClientConfiguration,
): Promise<DeleteProfileResponseDto> {
  const response = await PBrequest(
    "/ProfileProto/deleteProfile",
    ProfileId.encode(profileId),
    config,
  );
  return DeleteProfileResponseDto.decode(response);
}

//========================================//
//        ProfileProto JSON Client        //
//========================================//

export async function getProfilesJSON(
  emptyProfile: EmptyProfile,
  config?: ClientConfiguration,
): Promise<GetProfileResponseDto> {
  const response = await JSONrequest(
    "/ProfileProto/getProfiles",
    EmptyProfileJSON.encode(emptyProfile),
    config,
  );
  return GetProfileResponseDtoJSON.decode(response);
}

export async function getProfileJSON(
  ownerId: OwnerId,
  config?: ClientConfiguration,
): Promise<Profile> {
  const response = await JSONrequest(
    "/ProfileProto/getProfile",
    OwnerIdJSON.encode(ownerId),
    config,
  );
  return ProfileJSON.decode(response);
}

export async function createProfileJSON(
  createProfileDto: CreateProfileDto,
  config?: ClientConfiguration,
): Promise<Profile> {
  const response = await JSONrequest(
    "/ProfileProto/createProfile",
    CreateProfileDtoJSON.encode(createProfileDto),
    config,
  );
  return ProfileJSON.decode(response);
}

export async function updateProfileJSON(
  updateProfileDto: UpdateProfileDto,
  config?: ClientConfiguration,
): Promise<Profile> {
  const response = await JSONrequest(
    "/ProfileProto/updateProfile",
    UpdateProfileDtoJSON.encode(updateProfileDto),
    config,
  );
  return ProfileJSON.decode(response);
}

export async function deleteProfileJSON(
  profileId: ProfileId,
  config?: ClientConfiguration,
): Promise<DeleteProfileResponseDto> {
  const response = await JSONrequest(
    "/ProfileProto/deleteProfile",
    ProfileIdJSON.encode(profileId),
    config,
  );
  return DeleteProfileResponseDtoJSON.decode(response);
}

//========================================//
//              ProfileProto              //
//========================================//

export interface ProfileProto<Context = unknown> {
  getProfiles: (
    emptyProfile: EmptyProfile,
    context: Context,
  ) => Promise<GetProfileResponseDto> | GetProfileResponseDto;
  getProfile: (
    ownerId: OwnerId,
    context: Context,
  ) => Promise<Profile> | Profile;
  createProfile: (
    createProfileDto: CreateProfileDto,
    context: Context,
  ) => Promise<Profile> | Profile;
  updateProfile: (
    updateProfileDto: UpdateProfileDto,
    context: Context,
  ) => Promise<Profile> | Profile;
  deleteProfile: (
    profileId: ProfileId,
    context: Context,
  ) => Promise<DeleteProfileResponseDto> | DeleteProfileResponseDto;
}

export function createProfileProto<Context>(service: ProfileProto<Context>) {
  return {
    name: "ProfileProto",
    methods: {
      getProfiles: {
        name: "getProfiles",
        handler: service.getProfiles,
        input: { protobuf: EmptyProfile, json: EmptyProfileJSON },
        output: {
          protobuf: GetProfileResponseDto,
          json: GetProfileResponseDtoJSON,
        },
      },
      getProfile: {
        name: "getProfile",
        handler: service.getProfile,
        input: { protobuf: OwnerId, json: OwnerIdJSON },
        output: { protobuf: Profile, json: ProfileJSON },
      },
      createProfile: {
        name: "createProfile",
        handler: service.createProfile,
        input: { protobuf: CreateProfileDto, json: CreateProfileDtoJSON },
        output: { protobuf: Profile, json: ProfileJSON },
      },
      updateProfile: {
        name: "updateProfile",
        handler: service.updateProfile,
        input: { protobuf: UpdateProfileDto, json: UpdateProfileDtoJSON },
        output: { protobuf: Profile, json: ProfileJSON },
      },
      deleteProfile: {
        name: "deleteProfile",
        handler: service.deleteProfile,
        input: { protobuf: ProfileId, json: ProfileIdJSON },
        output: {
          protobuf: DeleteProfileResponseDto,
          json: DeleteProfileResponseDtoJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const GetProfileResponseDto = {
  /**
   * Serializes GetProfileResponseDto to protobuf.
   */
  encode: function (msg: PartialDeep<GetProfileResponseDto>): Uint8Array {
    return GetProfileResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetProfileResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): GetProfileResponseDto {
    return GetProfileResponseDto._readMessage(
      GetProfileResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetProfileResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetProfileResponseDto>,
  ): GetProfileResponseDto {
    return {
      profiles: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetProfileResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.profiles?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.profiles as any,
        Profile._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetProfileResponseDto,
    reader: protoscript.BinaryReader,
  ): GetProfileResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Profile.initialize();
          reader.readMessage(m, Profile._readMessage);
          msg.profiles.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteProfileResponseDto = {
  /**
   * Serializes DeleteProfileResponseDto to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteProfileResponseDto>): Uint8Array {
    return DeleteProfileResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteProfileResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteProfileResponseDto {
    return DeleteProfileResponseDto._readMessage(
      DeleteProfileResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteProfileResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteProfileResponseDto>,
  ): DeleteProfileResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteProfileResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.success) {
      writer.writeBool(1, msg.success);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteProfileResponseDto,
    reader: protoscript.BinaryReader,
  ): DeleteProfileResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.success = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const OwnerId = {
  /**
   * Serializes OwnerId to protobuf.
   */
  encode: function (msg: PartialDeep<OwnerId>): Uint8Array {
    return OwnerId._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes OwnerId from protobuf.
   */
  decode: function (bytes: ByteSource): OwnerId {
    return OwnerId._readMessage(
      OwnerId.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes OwnerId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<OwnerId>): OwnerId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<OwnerId>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: OwnerId,
    reader: protoscript.BinaryReader,
  ): OwnerId {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EmptyProfile = {
  /**
   * Serializes EmptyProfile to protobuf.
   */
  encode: function (_msg?: PartialDeep<EmptyProfile>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes EmptyProfile from protobuf.
   */
  decode: function (_bytes?: ByteSource): EmptyProfile {
    return {};
  },

  /**
   * Initializes EmptyProfile with all fields set to their default value.
   */
  initialize: function (msg?: Partial<EmptyProfile>): EmptyProfile {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<EmptyProfile>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: EmptyProfile,
    _reader: protoscript.BinaryReader,
  ): EmptyProfile {
    return _msg;
  },
};

export const ProfileId = {
  /**
   * Serializes ProfileId to protobuf.
   */
  encode: function (msg: PartialDeep<ProfileId>): Uint8Array {
    return ProfileId._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ProfileId from protobuf.
   */
  decode: function (bytes: ByteSource): ProfileId {
    return ProfileId._readMessage(
      ProfileId.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ProfileId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ProfileId>): ProfileId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ProfileId>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ProfileId,
    reader: protoscript.BinaryReader,
  ): ProfileId {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateProfileDto = {
  /**
   * Serializes UpdateProfileDto to protobuf.
   */
  encode: function (msg: PartialDeep<UpdateProfileDto>): Uint8Array {
    return UpdateProfileDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateProfileDto from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateProfileDto {
    return UpdateProfileDto._readMessage(
      UpdateProfileDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpdateProfileDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UpdateProfileDto>): UpdateProfileDto {
    return {
      id: "",
      ownerId: "",
      firstName: "",
      lastName: "",
      dateOfBirth: "",
      profession: "",
      employer: "",
      dateHired: "",
      employmentStatus: "",
      relationshipStatus: "",
      profilePhoto: "",
      bannerImage: "",
      hometown: "",
      city: "",
      province: "",
      country: "",
      language: "",
      mobilePhone: "",
      visibility: "",
      createdAt: protoscript.Timestamp.initialize(),
      updatedAt: protoscript.Timestamp.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateProfileDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.ownerId) {
      writer.writeString(2, msg.ownerId);
    }
    if (msg.firstName) {
      writer.writeString(3, msg.firstName);
    }
    if (msg.lastName) {
      writer.writeString(4, msg.lastName);
    }
    if (msg.dateOfBirth) {
      writer.writeString(5, msg.dateOfBirth);
    }
    if (msg.profession) {
      writer.writeString(6, msg.profession);
    }
    if (msg.employer) {
      writer.writeString(7, msg.employer);
    }
    if (msg.dateHired) {
      writer.writeString(8, msg.dateHired);
    }
    if (msg.employmentStatus) {
      writer.writeString(9, msg.employmentStatus);
    }
    if (msg.relationshipStatus) {
      writer.writeString(10, msg.relationshipStatus);
    }
    if (msg.profilePhoto) {
      writer.writeString(11, msg.profilePhoto);
    }
    if (msg.bannerImage) {
      writer.writeString(12, msg.bannerImage);
    }
    if (msg.hometown) {
      writer.writeString(13, msg.hometown);
    }
    if (msg.city) {
      writer.writeString(14, msg.city);
    }
    if (msg.province) {
      writer.writeString(15, msg.province);
    }
    if (msg.country) {
      writer.writeString(16, msg.country);
    }
    if (msg.language) {
      writer.writeString(17, msg.language);
    }
    if (msg.mobilePhone) {
      writer.writeString(18, msg.mobilePhone);
    }
    if (msg.visibility) {
      writer.writeString(19, msg.visibility);
    }
    if (msg.createdAt) {
      writer.writeMessage(
        20,
        msg.createdAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    if (msg.updatedAt) {
      writer.writeMessage(
        21,
        msg.updatedAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateProfileDto,
    reader: protoscript.BinaryReader,
  ): UpdateProfileDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.ownerId = reader.readString();
          break;
        }
        case 3: {
          msg.firstName = reader.readString();
          break;
        }
        case 4: {
          msg.lastName = reader.readString();
          break;
        }
        case 5: {
          msg.dateOfBirth = reader.readString();
          break;
        }
        case 6: {
          msg.profession = reader.readString();
          break;
        }
        case 7: {
          msg.employer = reader.readString();
          break;
        }
        case 8: {
          msg.dateHired = reader.readString();
          break;
        }
        case 9: {
          msg.employmentStatus = reader.readString();
          break;
        }
        case 10: {
          msg.relationshipStatus = reader.readString();
          break;
        }
        case 11: {
          msg.profilePhoto = reader.readString();
          break;
        }
        case 12: {
          msg.bannerImage = reader.readString();
          break;
        }
        case 13: {
          msg.hometown = reader.readString();
          break;
        }
        case 14: {
          msg.city = reader.readString();
          break;
        }
        case 15: {
          msg.province = reader.readString();
          break;
        }
        case 16: {
          msg.country = reader.readString();
          break;
        }
        case 17: {
          msg.language = reader.readString();
          break;
        }
        case 18: {
          msg.mobilePhone = reader.readString();
          break;
        }
        case 19: {
          msg.visibility = reader.readString();
          break;
        }
        case 20: {
          reader.readMessage(msg.createdAt, protoscript.Timestamp._readMessage);
          break;
        }
        case 21: {
          reader.readMessage(msg.updatedAt, protoscript.Timestamp._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateProfileDto = {
  /**
   * Serializes CreateProfileDto to protobuf.
   */
  encode: function (msg: PartialDeep<CreateProfileDto>): Uint8Array {
    return CreateProfileDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateProfileDto from protobuf.
   */
  decode: function (bytes: ByteSource): CreateProfileDto {
    return CreateProfileDto._readMessage(
      CreateProfileDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateProfileDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateProfileDto>): CreateProfileDto {
    return {
      ownerId: "",
      firstName: "",
      lastName: "",
      dateOfBirth: "",
      profession: "",
      employer: "",
      dateHired: "",
      employmentStatus: "",
      relationshipStatus: "",
      profilePhoto: "",
      bannerImage: "",
      hometown: "",
      city: "",
      province: "",
      country: "",
      language: "",
      mobilePhone: "",
      visibility: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateProfileDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.ownerId) {
      writer.writeString(1, msg.ownerId);
    }
    if (msg.firstName) {
      writer.writeString(2, msg.firstName);
    }
    if (msg.lastName) {
      writer.writeString(3, msg.lastName);
    }
    if (msg.dateOfBirth) {
      writer.writeString(4, msg.dateOfBirth);
    }
    if (msg.profession) {
      writer.writeString(5, msg.profession);
    }
    if (msg.employer) {
      writer.writeString(6, msg.employer);
    }
    if (msg.dateHired) {
      writer.writeString(7, msg.dateHired);
    }
    if (msg.employmentStatus) {
      writer.writeString(8, msg.employmentStatus);
    }
    if (msg.relationshipStatus) {
      writer.writeString(9, msg.relationshipStatus);
    }
    if (msg.profilePhoto) {
      writer.writeString(10, msg.profilePhoto);
    }
    if (msg.bannerImage) {
      writer.writeString(11, msg.bannerImage);
    }
    if (msg.hometown) {
      writer.writeString(12, msg.hometown);
    }
    if (msg.city) {
      writer.writeString(13, msg.city);
    }
    if (msg.province) {
      writer.writeString(14, msg.province);
    }
    if (msg.country) {
      writer.writeString(15, msg.country);
    }
    if (msg.language) {
      writer.writeString(16, msg.language);
    }
    if (msg.mobilePhone) {
      writer.writeString(17, msg.mobilePhone);
    }
    if (msg.visibility) {
      writer.writeString(18, msg.visibility);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateProfileDto,
    reader: protoscript.BinaryReader,
  ): CreateProfileDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.ownerId = reader.readString();
          break;
        }
        case 2: {
          msg.firstName = reader.readString();
          break;
        }
        case 3: {
          msg.lastName = reader.readString();
          break;
        }
        case 4: {
          msg.dateOfBirth = reader.readString();
          break;
        }
        case 5: {
          msg.profession = reader.readString();
          break;
        }
        case 6: {
          msg.employer = reader.readString();
          break;
        }
        case 7: {
          msg.dateHired = reader.readString();
          break;
        }
        case 8: {
          msg.employmentStatus = reader.readString();
          break;
        }
        case 9: {
          msg.relationshipStatus = reader.readString();
          break;
        }
        case 10: {
          msg.profilePhoto = reader.readString();
          break;
        }
        case 11: {
          msg.bannerImage = reader.readString();
          break;
        }
        case 12: {
          msg.hometown = reader.readString();
          break;
        }
        case 13: {
          msg.city = reader.readString();
          break;
        }
        case 14: {
          msg.province = reader.readString();
          break;
        }
        case 15: {
          msg.country = reader.readString();
          break;
        }
        case 16: {
          msg.language = reader.readString();
          break;
        }
        case 17: {
          msg.mobilePhone = reader.readString();
          break;
        }
        case 18: {
          msg.visibility = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Profile = {
  /**
   * Serializes Profile to protobuf.
   */
  encode: function (msg: PartialDeep<Profile>): Uint8Array {
    return Profile._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Profile from protobuf.
   */
  decode: function (bytes: ByteSource): Profile {
    return Profile._readMessage(
      Profile.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Profile with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Profile>): Profile {
    return {
      id: "",
      ownerId: "",
      firstName: "",
      lastName: "",
      dateOfBirth: "",
      profession: "",
      employer: "",
      dateHired: "",
      employmentStatus: "",
      relationshipStatus: "",
      profilePhoto: "",
      bannerImage: "",
      hometown: "",
      city: "",
      province: "",
      country: "",
      language: "",
      mobilePhone: "",
      visibility: "",
      createdAt: protoscript.Timestamp.initialize(),
      updatedAt: protoscript.Timestamp.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Profile>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.ownerId) {
      writer.writeString(2, msg.ownerId);
    }
    if (msg.firstName) {
      writer.writeString(3, msg.firstName);
    }
    if (msg.lastName) {
      writer.writeString(4, msg.lastName);
    }
    if (msg.dateOfBirth) {
      writer.writeString(5, msg.dateOfBirth);
    }
    if (msg.profession) {
      writer.writeString(6, msg.profession);
    }
    if (msg.employer) {
      writer.writeString(7, msg.employer);
    }
    if (msg.dateHired) {
      writer.writeString(8, msg.dateHired);
    }
    if (msg.employmentStatus) {
      writer.writeString(9, msg.employmentStatus);
    }
    if (msg.relationshipStatus) {
      writer.writeString(10, msg.relationshipStatus);
    }
    if (msg.profilePhoto) {
      writer.writeString(11, msg.profilePhoto);
    }
    if (msg.bannerImage) {
      writer.writeString(12, msg.bannerImage);
    }
    if (msg.hometown) {
      writer.writeString(13, msg.hometown);
    }
    if (msg.city) {
      writer.writeString(14, msg.city);
    }
    if (msg.province) {
      writer.writeString(15, msg.province);
    }
    if (msg.country) {
      writer.writeString(16, msg.country);
    }
    if (msg.language) {
      writer.writeString(17, msg.language);
    }
    if (msg.mobilePhone) {
      writer.writeString(18, msg.mobilePhone);
    }
    if (msg.visibility) {
      writer.writeString(19, msg.visibility);
    }
    if (msg.createdAt) {
      writer.writeMessage(
        20,
        msg.createdAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    if (msg.updatedAt) {
      writer.writeMessage(
        21,
        msg.updatedAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Profile,
    reader: protoscript.BinaryReader,
  ): Profile {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.ownerId = reader.readString();
          break;
        }
        case 3: {
          msg.firstName = reader.readString();
          break;
        }
        case 4: {
          msg.lastName = reader.readString();
          break;
        }
        case 5: {
          msg.dateOfBirth = reader.readString();
          break;
        }
        case 6: {
          msg.profession = reader.readString();
          break;
        }
        case 7: {
          msg.employer = reader.readString();
          break;
        }
        case 8: {
          msg.dateHired = reader.readString();
          break;
        }
        case 9: {
          msg.employmentStatus = reader.readString();
          break;
        }
        case 10: {
          msg.relationshipStatus = reader.readString();
          break;
        }
        case 11: {
          msg.profilePhoto = reader.readString();
          break;
        }
        case 12: {
          msg.bannerImage = reader.readString();
          break;
        }
        case 13: {
          msg.hometown = reader.readString();
          break;
        }
        case 14: {
          msg.city = reader.readString();
          break;
        }
        case 15: {
          msg.province = reader.readString();
          break;
        }
        case 16: {
          msg.country = reader.readString();
          break;
        }
        case 17: {
          msg.language = reader.readString();
          break;
        }
        case 18: {
          msg.mobilePhone = reader.readString();
          break;
        }
        case 19: {
          msg.visibility = reader.readString();
          break;
        }
        case 20: {
          reader.readMessage(msg.createdAt, protoscript.Timestamp._readMessage);
          break;
        }
        case 21: {
          reader.readMessage(msg.updatedAt, protoscript.Timestamp._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const GetProfileResponseDtoJSON = {
  /**
   * Serializes GetProfileResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<GetProfileResponseDto>): string {
    return JSON.stringify(GetProfileResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetProfileResponseDto from JSON.
   */
  decode: function (json: string): GetProfileResponseDto {
    return GetProfileResponseDtoJSON._readMessage(
      GetProfileResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetProfileResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetProfileResponseDto>,
  ): GetProfileResponseDto {
    return {
      profiles: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetProfileResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.profiles?.length) {
      json["profiles"] = msg.profiles.map(ProfileJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetProfileResponseDto,
    json: any,
  ): GetProfileResponseDto {
    const _profiles_ = json["profiles"];
    if (_profiles_) {
      for (const item of _profiles_) {
        const m = ProfileJSON.initialize();
        ProfileJSON._readMessage(m, item);
        msg.profiles.push(m);
      }
    }
    return msg;
  },
};

export const DeleteProfileResponseDtoJSON = {
  /**
   * Serializes DeleteProfileResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<DeleteProfileResponseDto>): string {
    return JSON.stringify(DeleteProfileResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteProfileResponseDto from JSON.
   */
  decode: function (json: string): DeleteProfileResponseDto {
    return DeleteProfileResponseDtoJSON._readMessage(
      DeleteProfileResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteProfileResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteProfileResponseDto>,
  ): DeleteProfileResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteProfileResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.success) {
      json["success"] = msg.success;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteProfileResponseDto,
    json: any,
  ): DeleteProfileResponseDto {
    const _success_ = json["success"];
    if (_success_) {
      msg.success = _success_;
    }
    return msg;
  },
};

export const OwnerIdJSON = {
  /**
   * Serializes OwnerId to JSON.
   */
  encode: function (msg: PartialDeep<OwnerId>): string {
    return JSON.stringify(OwnerIdJSON._writeMessage(msg));
  },

  /**
   * Deserializes OwnerId from JSON.
   */
  decode: function (json: string): OwnerId {
    return OwnerIdJSON._readMessage(OwnerIdJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes OwnerId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<OwnerId>): OwnerId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<OwnerId>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: OwnerId, json: any): OwnerId {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const EmptyProfileJSON = {
  /**
   * Serializes EmptyProfile to JSON.
   */
  encode: function (_msg?: PartialDeep<EmptyProfile>): string {
    return "{}";
  },

  /**
   * Deserializes EmptyProfile from JSON.
   */
  decode: function (_json?: string): EmptyProfile {
    return {};
  },

  /**
   * Initializes EmptyProfile with all fields set to their default value.
   */
  initialize: function (msg?: Partial<EmptyProfile>): EmptyProfile {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<EmptyProfile>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: EmptyProfile, _json: any): EmptyProfile {
    return msg;
  },
};

export const ProfileIdJSON = {
  /**
   * Serializes ProfileId to JSON.
   */
  encode: function (msg: PartialDeep<ProfileId>): string {
    return JSON.stringify(ProfileIdJSON._writeMessage(msg));
  },

  /**
   * Deserializes ProfileId from JSON.
   */
  decode: function (json: string): ProfileId {
    return ProfileIdJSON._readMessage(
      ProfileIdJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ProfileId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ProfileId>): ProfileId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ProfileId>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ProfileId, json: any): ProfileId {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const UpdateProfileDtoJSON = {
  /**
   * Serializes UpdateProfileDto to JSON.
   */
  encode: function (msg: PartialDeep<UpdateProfileDto>): string {
    return JSON.stringify(UpdateProfileDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateProfileDto from JSON.
   */
  decode: function (json: string): UpdateProfileDto {
    return UpdateProfileDtoJSON._readMessage(
      UpdateProfileDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpdateProfileDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UpdateProfileDto>): UpdateProfileDto {
    return {
      id: "",
      ownerId: "",
      firstName: "",
      lastName: "",
      dateOfBirth: "",
      profession: "",
      employer: "",
      dateHired: "",
      employmentStatus: "",
      relationshipStatus: "",
      profilePhoto: "",
      bannerImage: "",
      hometown: "",
      city: "",
      province: "",
      country: "",
      language: "",
      mobilePhone: "",
      visibility: "",
      createdAt: protoscript.TimestampJSON.initialize(),
      updatedAt: protoscript.TimestampJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateProfileDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.ownerId) {
      json["ownerId"] = msg.ownerId;
    }
    if (msg.firstName) {
      json["firstName"] = msg.firstName;
    }
    if (msg.lastName) {
      json["lastName"] = msg.lastName;
    }
    if (msg.dateOfBirth) {
      json["dateOfBirth"] = msg.dateOfBirth;
    }
    if (msg.profession) {
      json["profession"] = msg.profession;
    }
    if (msg.employer) {
      json["employer"] = msg.employer;
    }
    if (msg.dateHired) {
      json["dateHired"] = msg.dateHired;
    }
    if (msg.employmentStatus) {
      json["employmentStatus"] = msg.employmentStatus;
    }
    if (msg.relationshipStatus) {
      json["relationshipStatus"] = msg.relationshipStatus;
    }
    if (msg.profilePhoto) {
      json["profilePhoto"] = msg.profilePhoto;
    }
    if (msg.bannerImage) {
      json["bannerImage"] = msg.bannerImage;
    }
    if (msg.hometown) {
      json["hometown"] = msg.hometown;
    }
    if (msg.city) {
      json["city"] = msg.city;
    }
    if (msg.province) {
      json["province"] = msg.province;
    }
    if (msg.country) {
      json["country"] = msg.country;
    }
    if (msg.language) {
      json["language"] = msg.language;
    }
    if (msg.mobilePhone) {
      json["mobilePhone"] = msg.mobilePhone;
    }
    if (msg.visibility) {
      json["visibility"] = msg.visibility;
    }
    if (msg.createdAt && msg.createdAt.seconds && msg.createdAt.nanos) {
      json["createdAt"] = protoscript.serializeTimestamp(msg.createdAt);
    }
    if (msg.updatedAt && msg.updatedAt.seconds && msg.updatedAt.nanos) {
      json["updatedAt"] = protoscript.serializeTimestamp(msg.updatedAt);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UpdateProfileDto, json: any): UpdateProfileDto {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _ownerId_ = json["ownerId"];
    if (_ownerId_) {
      msg.ownerId = _ownerId_;
    }
    const _firstName_ = json["firstName"];
    if (_firstName_) {
      msg.firstName = _firstName_;
    }
    const _lastName_ = json["lastName"];
    if (_lastName_) {
      msg.lastName = _lastName_;
    }
    const _dateOfBirth_ = json["dateOfBirth"];
    if (_dateOfBirth_) {
      msg.dateOfBirth = _dateOfBirth_;
    }
    const _profession_ = json["profession"];
    if (_profession_) {
      msg.profession = _profession_;
    }
    const _employer_ = json["employer"];
    if (_employer_) {
      msg.employer = _employer_;
    }
    const _dateHired_ = json["dateHired"];
    if (_dateHired_) {
      msg.dateHired = _dateHired_;
    }
    const _employmentStatus_ = json["employmentStatus"];
    if (_employmentStatus_) {
      msg.employmentStatus = _employmentStatus_;
    }
    const _relationshipStatus_ = json["relationshipStatus"];
    if (_relationshipStatus_) {
      msg.relationshipStatus = _relationshipStatus_;
    }
    const _profilePhoto_ = json["profilePhoto"];
    if (_profilePhoto_) {
      msg.profilePhoto = _profilePhoto_;
    }
    const _bannerImage_ = json["bannerImage"];
    if (_bannerImage_) {
      msg.bannerImage = _bannerImage_;
    }
    const _hometown_ = json["hometown"];
    if (_hometown_) {
      msg.hometown = _hometown_;
    }
    const _city_ = json["city"];
    if (_city_) {
      msg.city = _city_;
    }
    const _province_ = json["province"];
    if (_province_) {
      msg.province = _province_;
    }
    const _country_ = json["country"];
    if (_country_) {
      msg.country = _country_;
    }
    const _language_ = json["language"];
    if (_language_) {
      msg.language = _language_;
    }
    const _mobilePhone_ = json["mobilePhone"];
    if (_mobilePhone_) {
      msg.mobilePhone = _mobilePhone_;
    }
    const _visibility_ = json["visibility"];
    if (_visibility_) {
      msg.visibility = _visibility_;
    }
    const _createdAt_ = json["createdAt"];
    if (_createdAt_) {
      msg.createdAt = protoscript.parseTimestamp(_createdAt_);
    }
    const _updatedAt_ = json["updatedAt"];
    if (_updatedAt_) {
      msg.updatedAt = protoscript.parseTimestamp(_updatedAt_);
    }
    return msg;
  },
};

export const CreateProfileDtoJSON = {
  /**
   * Serializes CreateProfileDto to JSON.
   */
  encode: function (msg: PartialDeep<CreateProfileDto>): string {
    return JSON.stringify(CreateProfileDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateProfileDto from JSON.
   */
  decode: function (json: string): CreateProfileDto {
    return CreateProfileDtoJSON._readMessage(
      CreateProfileDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateProfileDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateProfileDto>): CreateProfileDto {
    return {
      ownerId: "",
      firstName: "",
      lastName: "",
      dateOfBirth: "",
      profession: "",
      employer: "",
      dateHired: "",
      employmentStatus: "",
      relationshipStatus: "",
      profilePhoto: "",
      bannerImage: "",
      hometown: "",
      city: "",
      province: "",
      country: "",
      language: "",
      mobilePhone: "",
      visibility: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateProfileDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.ownerId) {
      json["ownerId"] = msg.ownerId;
    }
    if (msg.firstName) {
      json["firstName"] = msg.firstName;
    }
    if (msg.lastName) {
      json["lastName"] = msg.lastName;
    }
    if (msg.dateOfBirth) {
      json["dateOfBirth"] = msg.dateOfBirth;
    }
    if (msg.profession) {
      json["profession"] = msg.profession;
    }
    if (msg.employer) {
      json["employer"] = msg.employer;
    }
    if (msg.dateHired) {
      json["dateHired"] = msg.dateHired;
    }
    if (msg.employmentStatus) {
      json["employmentStatus"] = msg.employmentStatus;
    }
    if (msg.relationshipStatus) {
      json["relationshipStatus"] = msg.relationshipStatus;
    }
    if (msg.profilePhoto) {
      json["profilePhoto"] = msg.profilePhoto;
    }
    if (msg.bannerImage) {
      json["bannerImage"] = msg.bannerImage;
    }
    if (msg.hometown) {
      json["hometown"] = msg.hometown;
    }
    if (msg.city) {
      json["city"] = msg.city;
    }
    if (msg.province) {
      json["province"] = msg.province;
    }
    if (msg.country) {
      json["country"] = msg.country;
    }
    if (msg.language) {
      json["language"] = msg.language;
    }
    if (msg.mobilePhone) {
      json["mobilePhone"] = msg.mobilePhone;
    }
    if (msg.visibility) {
      json["visibility"] = msg.visibility;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: CreateProfileDto, json: any): CreateProfileDto {
    const _ownerId_ = json["ownerId"];
    if (_ownerId_) {
      msg.ownerId = _ownerId_;
    }
    const _firstName_ = json["firstName"];
    if (_firstName_) {
      msg.firstName = _firstName_;
    }
    const _lastName_ = json["lastName"];
    if (_lastName_) {
      msg.lastName = _lastName_;
    }
    const _dateOfBirth_ = json["dateOfBirth"];
    if (_dateOfBirth_) {
      msg.dateOfBirth = _dateOfBirth_;
    }
    const _profession_ = json["profession"];
    if (_profession_) {
      msg.profession = _profession_;
    }
    const _employer_ = json["employer"];
    if (_employer_) {
      msg.employer = _employer_;
    }
    const _dateHired_ = json["dateHired"];
    if (_dateHired_) {
      msg.dateHired = _dateHired_;
    }
    const _employmentStatus_ = json["employmentStatus"];
    if (_employmentStatus_) {
      msg.employmentStatus = _employmentStatus_;
    }
    const _relationshipStatus_ = json["relationshipStatus"];
    if (_relationshipStatus_) {
      msg.relationshipStatus = _relationshipStatus_;
    }
    const _profilePhoto_ = json["profilePhoto"];
    if (_profilePhoto_) {
      msg.profilePhoto = _profilePhoto_;
    }
    const _bannerImage_ = json["bannerImage"];
    if (_bannerImage_) {
      msg.bannerImage = _bannerImage_;
    }
    const _hometown_ = json["hometown"];
    if (_hometown_) {
      msg.hometown = _hometown_;
    }
    const _city_ = json["city"];
    if (_city_) {
      msg.city = _city_;
    }
    const _province_ = json["province"];
    if (_province_) {
      msg.province = _province_;
    }
    const _country_ = json["country"];
    if (_country_) {
      msg.country = _country_;
    }
    const _language_ = json["language"];
    if (_language_) {
      msg.language = _language_;
    }
    const _mobilePhone_ = json["mobilePhone"];
    if (_mobilePhone_) {
      msg.mobilePhone = _mobilePhone_;
    }
    const _visibility_ = json["visibility"];
    if (_visibility_) {
      msg.visibility = _visibility_;
    }
    return msg;
  },
};

export const ProfileJSON = {
  /**
   * Serializes Profile to JSON.
   */
  encode: function (msg: PartialDeep<Profile>): string {
    return JSON.stringify(ProfileJSON._writeMessage(msg));
  },

  /**
   * Deserializes Profile from JSON.
   */
  decode: function (json: string): Profile {
    return ProfileJSON._readMessage(ProfileJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Profile with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Profile>): Profile {
    return {
      id: "",
      ownerId: "",
      firstName: "",
      lastName: "",
      dateOfBirth: "",
      profession: "",
      employer: "",
      dateHired: "",
      employmentStatus: "",
      relationshipStatus: "",
      profilePhoto: "",
      bannerImage: "",
      hometown: "",
      city: "",
      province: "",
      country: "",
      language: "",
      mobilePhone: "",
      visibility: "",
      createdAt: protoscript.TimestampJSON.initialize(),
      updatedAt: protoscript.TimestampJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Profile>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.ownerId) {
      json["ownerId"] = msg.ownerId;
    }
    if (msg.firstName) {
      json["firstName"] = msg.firstName;
    }
    if (msg.lastName) {
      json["lastName"] = msg.lastName;
    }
    if (msg.dateOfBirth) {
      json["dateOfBirth"] = msg.dateOfBirth;
    }
    if (msg.profession) {
      json["profession"] = msg.profession;
    }
    if (msg.employer) {
      json["employer"] = msg.employer;
    }
    if (msg.dateHired) {
      json["dateHired"] = msg.dateHired;
    }
    if (msg.employmentStatus) {
      json["employmentStatus"] = msg.employmentStatus;
    }
    if (msg.relationshipStatus) {
      json["relationshipStatus"] = msg.relationshipStatus;
    }
    if (msg.profilePhoto) {
      json["profilePhoto"] = msg.profilePhoto;
    }
    if (msg.bannerImage) {
      json["bannerImage"] = msg.bannerImage;
    }
    if (msg.hometown) {
      json["hometown"] = msg.hometown;
    }
    if (msg.city) {
      json["city"] = msg.city;
    }
    if (msg.province) {
      json["province"] = msg.province;
    }
    if (msg.country) {
      json["country"] = msg.country;
    }
    if (msg.language) {
      json["language"] = msg.language;
    }
    if (msg.mobilePhone) {
      json["mobilePhone"] = msg.mobilePhone;
    }
    if (msg.visibility) {
      json["visibility"] = msg.visibility;
    }
    if (msg.createdAt && msg.createdAt.seconds && msg.createdAt.nanos) {
      json["createdAt"] = protoscript.serializeTimestamp(msg.createdAt);
    }
    if (msg.updatedAt && msg.updatedAt.seconds && msg.updatedAt.nanos) {
      json["updatedAt"] = protoscript.serializeTimestamp(msg.updatedAt);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Profile, json: any): Profile {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _ownerId_ = json["ownerId"];
    if (_ownerId_) {
      msg.ownerId = _ownerId_;
    }
    const _firstName_ = json["firstName"];
    if (_firstName_) {
      msg.firstName = _firstName_;
    }
    const _lastName_ = json["lastName"];
    if (_lastName_) {
      msg.lastName = _lastName_;
    }
    const _dateOfBirth_ = json["dateOfBirth"];
    if (_dateOfBirth_) {
      msg.dateOfBirth = _dateOfBirth_;
    }
    const _profession_ = json["profession"];
    if (_profession_) {
      msg.profession = _profession_;
    }
    const _employer_ = json["employer"];
    if (_employer_) {
      msg.employer = _employer_;
    }
    const _dateHired_ = json["dateHired"];
    if (_dateHired_) {
      msg.dateHired = _dateHired_;
    }
    const _employmentStatus_ = json["employmentStatus"];
    if (_employmentStatus_) {
      msg.employmentStatus = _employmentStatus_;
    }
    const _relationshipStatus_ = json["relationshipStatus"];
    if (_relationshipStatus_) {
      msg.relationshipStatus = _relationshipStatus_;
    }
    const _profilePhoto_ = json["profilePhoto"];
    if (_profilePhoto_) {
      msg.profilePhoto = _profilePhoto_;
    }
    const _bannerImage_ = json["bannerImage"];
    if (_bannerImage_) {
      msg.bannerImage = _bannerImage_;
    }
    const _hometown_ = json["hometown"];
    if (_hometown_) {
      msg.hometown = _hometown_;
    }
    const _city_ = json["city"];
    if (_city_) {
      msg.city = _city_;
    }
    const _province_ = json["province"];
    if (_province_) {
      msg.province = _province_;
    }
    const _country_ = json["country"];
    if (_country_) {
      msg.country = _country_;
    }
    const _language_ = json["language"];
    if (_language_) {
      msg.language = _language_;
    }
    const _mobilePhone_ = json["mobilePhone"];
    if (_mobilePhone_) {
      msg.mobilePhone = _mobilePhone_;
    }
    const _visibility_ = json["visibility"];
    if (_visibility_) {
      msg.visibility = _visibility_;
    }
    const _createdAt_ = json["createdAt"];
    if (_createdAt_) {
      msg.createdAt = protoscript.parseTimestamp(_createdAt_);
    }
    const _updatedAt_ = json["updatedAt"];
    if (_updatedAt_) {
      msg.updatedAt = protoscript.parseTimestamp(_updatedAt_);
    }
    return msg;
  },
};
