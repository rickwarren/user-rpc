// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/protos/video.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface VideosResponseDto {
  videos: VideoDto[];
}

export interface DeleteVideoResponseDto {
  success: boolean;
}

export interface VideoId {
  id: string;
}

export interface CreateVideoDto {
  userId: string;
  localFileId: string;
}

export interface VideoDto {
  id: string;
  userId: string;
  localFileId: string;
}

//========================================//
//       VideoProto Protobuf Client       //
//========================================//

export async function getVideos(
  videoId: VideoId,
  config?: ClientConfiguration,
): Promise<VideosResponseDto> {
  const response = await PBrequest(
    "/VideoProto/getVideos",
    VideoId.encode(videoId),
    config,
  );
  return VideosResponseDto.decode(response);
}

export async function getVideo(
  videoId: VideoId,
  config?: ClientConfiguration,
): Promise<VideoDto> {
  const response = await PBrequest(
    "/VideoProto/getVideo",
    VideoId.encode(videoId),
    config,
  );
  return VideoDto.decode(response);
}

export async function createVideo(
  createVideoDto: CreateVideoDto,
  config?: ClientConfiguration,
): Promise<VideoDto> {
  const response = await PBrequest(
    "/VideoProto/createVideo",
    CreateVideoDto.encode(createVideoDto),
    config,
  );
  return VideoDto.decode(response);
}

export async function deleteVideo(
  videoId: VideoId,
  config?: ClientConfiguration,
): Promise<DeleteVideoResponseDto> {
  const response = await PBrequest(
    "/VideoProto/deleteVideo",
    VideoId.encode(videoId),
    config,
  );
  return DeleteVideoResponseDto.decode(response);
}

//========================================//
//         VideoProto JSON Client         //
//========================================//

export async function getVideosJSON(
  videoId: VideoId,
  config?: ClientConfiguration,
): Promise<VideosResponseDto> {
  const response = await JSONrequest(
    "/VideoProto/getVideos",
    VideoIdJSON.encode(videoId),
    config,
  );
  return VideosResponseDtoJSON.decode(response);
}

export async function getVideoJSON(
  videoId: VideoId,
  config?: ClientConfiguration,
): Promise<VideoDto> {
  const response = await JSONrequest(
    "/VideoProto/getVideo",
    VideoIdJSON.encode(videoId),
    config,
  );
  return VideoDtoJSON.decode(response);
}

export async function createVideoJSON(
  createVideoDto: CreateVideoDto,
  config?: ClientConfiguration,
): Promise<VideoDto> {
  const response = await JSONrequest(
    "/VideoProto/createVideo",
    CreateVideoDtoJSON.encode(createVideoDto),
    config,
  );
  return VideoDtoJSON.decode(response);
}

export async function deleteVideoJSON(
  videoId: VideoId,
  config?: ClientConfiguration,
): Promise<DeleteVideoResponseDto> {
  const response = await JSONrequest(
    "/VideoProto/deleteVideo",
    VideoIdJSON.encode(videoId),
    config,
  );
  return DeleteVideoResponseDtoJSON.decode(response);
}

//========================================//
//               VideoProto               //
//========================================//

export interface VideoProto<Context = unknown> {
  getVideos: (
    videoId: VideoId,
    context: Context,
  ) => Promise<VideosResponseDto> | VideosResponseDto;
  getVideo: (
    videoId: VideoId,
    context: Context,
  ) => Promise<VideoDto> | VideoDto;
  createVideo: (
    createVideoDto: CreateVideoDto,
    context: Context,
  ) => Promise<VideoDto> | VideoDto;
  deleteVideo: (
    videoId: VideoId,
    context: Context,
  ) => Promise<DeleteVideoResponseDto> | DeleteVideoResponseDto;
}

export function createVideoProto<Context>(service: VideoProto<Context>) {
  return {
    name: "VideoProto",
    methods: {
      getVideos: {
        name: "getVideos",
        handler: service.getVideos,
        input: { protobuf: VideoId, json: VideoIdJSON },
        output: { protobuf: VideosResponseDto, json: VideosResponseDtoJSON },
      },
      getVideo: {
        name: "getVideo",
        handler: service.getVideo,
        input: { protobuf: VideoId, json: VideoIdJSON },
        output: { protobuf: VideoDto, json: VideoDtoJSON },
      },
      createVideo: {
        name: "createVideo",
        handler: service.createVideo,
        input: { protobuf: CreateVideoDto, json: CreateVideoDtoJSON },
        output: { protobuf: VideoDto, json: VideoDtoJSON },
      },
      deleteVideo: {
        name: "deleteVideo",
        handler: service.deleteVideo,
        input: { protobuf: VideoId, json: VideoIdJSON },
        output: {
          protobuf: DeleteVideoResponseDto,
          json: DeleteVideoResponseDtoJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const VideosResponseDto = {
  /**
   * Serializes VideosResponseDto to protobuf.
   */
  encode: function (msg: PartialDeep<VideosResponseDto>): Uint8Array {
    return VideosResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes VideosResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): VideosResponseDto {
    return VideosResponseDto._readMessage(
      VideosResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes VideosResponseDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<VideosResponseDto>): VideosResponseDto {
    return {
      videos: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<VideosResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.videos?.length) {
      writer.writeRepeatedMessage(1, msg.videos as any, VideoDto._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: VideosResponseDto,
    reader: protoscript.BinaryReader,
  ): VideosResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = VideoDto.initialize();
          reader.readMessage(m, VideoDto._readMessage);
          msg.videos.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteVideoResponseDto = {
  /**
   * Serializes DeleteVideoResponseDto to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteVideoResponseDto>): Uint8Array {
    return DeleteVideoResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteVideoResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteVideoResponseDto {
    return DeleteVideoResponseDto._readMessage(
      DeleteVideoResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteVideoResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteVideoResponseDto>,
  ): DeleteVideoResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteVideoResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.success) {
      writer.writeBool(1, msg.success);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteVideoResponseDto,
    reader: protoscript.BinaryReader,
  ): DeleteVideoResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.success = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const VideoId = {
  /**
   * Serializes VideoId to protobuf.
   */
  encode: function (msg: PartialDeep<VideoId>): Uint8Array {
    return VideoId._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes VideoId from protobuf.
   */
  decode: function (bytes: ByteSource): VideoId {
    return VideoId._readMessage(
      VideoId.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes VideoId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<VideoId>): VideoId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<VideoId>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: VideoId,
    reader: protoscript.BinaryReader,
  ): VideoId {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateVideoDto = {
  /**
   * Serializes CreateVideoDto to protobuf.
   */
  encode: function (msg: PartialDeep<CreateVideoDto>): Uint8Array {
    return CreateVideoDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateVideoDto from protobuf.
   */
  decode: function (bytes: ByteSource): CreateVideoDto {
    return CreateVideoDto._readMessage(
      CreateVideoDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateVideoDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateVideoDto>): CreateVideoDto {
    return {
      userId: "",
      localFileId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateVideoDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    if (msg.localFileId) {
      writer.writeString(2, msg.localFileId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateVideoDto,
    reader: protoscript.BinaryReader,
  ): CreateVideoDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        case 2: {
          msg.localFileId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const VideoDto = {
  /**
   * Serializes VideoDto to protobuf.
   */
  encode: function (msg: PartialDeep<VideoDto>): Uint8Array {
    return VideoDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes VideoDto from protobuf.
   */
  decode: function (bytes: ByteSource): VideoDto {
    return VideoDto._readMessage(
      VideoDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes VideoDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<VideoDto>): VideoDto {
    return {
      id: "",
      userId: "",
      localFileId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<VideoDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.userId) {
      writer.writeString(2, msg.userId);
    }
    if (msg.localFileId) {
      writer.writeString(3, msg.localFileId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: VideoDto,
    reader: protoscript.BinaryReader,
  ): VideoDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.userId = reader.readString();
          break;
        }
        case 3: {
          msg.localFileId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const VideosResponseDtoJSON = {
  /**
   * Serializes VideosResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<VideosResponseDto>): string {
    return JSON.stringify(VideosResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes VideosResponseDto from JSON.
   */
  decode: function (json: string): VideosResponseDto {
    return VideosResponseDtoJSON._readMessage(
      VideosResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes VideosResponseDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<VideosResponseDto>): VideosResponseDto {
    return {
      videos: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<VideosResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.videos?.length) {
      json["videos"] = msg.videos.map(VideoDtoJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: VideosResponseDto,
    json: any,
  ): VideosResponseDto {
    const _videos_ = json["videos"];
    if (_videos_) {
      for (const item of _videos_) {
        const m = VideoDtoJSON.initialize();
        VideoDtoJSON._readMessage(m, item);
        msg.videos.push(m);
      }
    }
    return msg;
  },
};

export const DeleteVideoResponseDtoJSON = {
  /**
   * Serializes DeleteVideoResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<DeleteVideoResponseDto>): string {
    return JSON.stringify(DeleteVideoResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteVideoResponseDto from JSON.
   */
  decode: function (json: string): DeleteVideoResponseDto {
    return DeleteVideoResponseDtoJSON._readMessage(
      DeleteVideoResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteVideoResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteVideoResponseDto>,
  ): DeleteVideoResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteVideoResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.success) {
      json["success"] = msg.success;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteVideoResponseDto,
    json: any,
  ): DeleteVideoResponseDto {
    const _success_ = json["success"];
    if (_success_) {
      msg.success = _success_;
    }
    return msg;
  },
};

export const VideoIdJSON = {
  /**
   * Serializes VideoId to JSON.
   */
  encode: function (msg: PartialDeep<VideoId>): string {
    return JSON.stringify(VideoIdJSON._writeMessage(msg));
  },

  /**
   * Deserializes VideoId from JSON.
   */
  decode: function (json: string): VideoId {
    return VideoIdJSON._readMessage(VideoIdJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes VideoId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<VideoId>): VideoId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<VideoId>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: VideoId, json: any): VideoId {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const CreateVideoDtoJSON = {
  /**
   * Serializes CreateVideoDto to JSON.
   */
  encode: function (msg: PartialDeep<CreateVideoDto>): string {
    return JSON.stringify(CreateVideoDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateVideoDto from JSON.
   */
  decode: function (json: string): CreateVideoDto {
    return CreateVideoDtoJSON._readMessage(
      CreateVideoDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateVideoDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateVideoDto>): CreateVideoDto {
    return {
      userId: "",
      localFileId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateVideoDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.localFileId) {
      json["localFileId"] = msg.localFileId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: CreateVideoDto, json: any): CreateVideoDto {
    const _userId_ = json["userId"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _localFileId_ = json["localFileId"];
    if (_localFileId_) {
      msg.localFileId = _localFileId_;
    }
    return msg;
  },
};

export const VideoDtoJSON = {
  /**
   * Serializes VideoDto to JSON.
   */
  encode: function (msg: PartialDeep<VideoDto>): string {
    return JSON.stringify(VideoDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes VideoDto from JSON.
   */
  decode: function (json: string): VideoDto {
    return VideoDtoJSON._readMessage(
      VideoDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes VideoDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<VideoDto>): VideoDto {
    return {
      id: "",
      userId: "",
      localFileId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<VideoDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.localFileId) {
      json["localFileId"] = msg.localFileId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: VideoDto, json: any): VideoDto {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _userId_ = json["userId"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _localFileId_ = json["localFileId"];
    if (_localFileId_) {
      msg.localFileId = _localFileId_;
    }
    return msg;
  },
};
