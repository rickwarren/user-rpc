// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/protos/user.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface UserByEmailDto {
  email: string;
}

export interface GetUsersResponseDto {
  users: User[];
}

export interface DeleteUserResponseDto {
  success: boolean;
}

export interface EmptyUser {}

export interface UserId {
  id: string;
}

export interface UpdateUserDto {
  id: string;
  email: string;
  role: string;
  profile: ProfileDto;
  createdAt: protoscript.Timestamp;
  updatedAt: protoscript.Timestamp;
}

export interface CreateUserDto {
  email: string;
  password: string;
}

export interface User {
  id: string;
  email: string;
  password: string;
  role: string;
  profile: ProfileDto;
  createdAt: protoscript.Timestamp;
  updatedAt: protoscript.Timestamp;
}

export interface ProfileDto {
  id: string;
  ownerId: string;
  firstName: string;
  lastName: string;
  dateOfBirth: string;
  profession: string;
  employer: string;
  dateHired: string;
  employmentStatus: string;
  relationshipStatus: string;
  profilePhoto: string;
  bannerImage: string;
  hometown: string;
  city: string;
  province: string;
  country: string;
  language: string;
  mobilePhone: string;
  visibility: string;
  createdAt: protoscript.Timestamp;
  updatedAt: protoscript.Timestamp;
}

//========================================//
//       UserProto Protobuf Client        //
//========================================//

export async function getUsers(
  emptyUser: EmptyUser,
  config?: ClientConfiguration,
): Promise<GetUsersResponseDto> {
  const response = await PBrequest(
    "/UserProto/getUsers",
    EmptyUser.encode(emptyUser),
    config,
  );
  return GetUsersResponseDto.decode(response);
}

export async function getUser(
  userId: UserId,
  config?: ClientConfiguration,
): Promise<User> {
  const response = await PBrequest(
    "/UserProto/getUser",
    UserId.encode(userId),
    config,
  );
  return User.decode(response);
}

export async function getUserByEmail(
  userByEmailDto: UserByEmailDto,
  config?: ClientConfiguration,
): Promise<User> {
  const response = await PBrequest(
    "/UserProto/getUserByEmail",
    UserByEmailDto.encode(userByEmailDto),
    config,
  );
  return User.decode(response);
}

export async function createUser(
  createUserDto: CreateUserDto,
  config?: ClientConfiguration,
): Promise<User> {
  const response = await PBrequest(
    "/UserProto/createUser",
    CreateUserDto.encode(createUserDto),
    config,
  );
  return User.decode(response);
}

export async function updateUser(
  updateUserDto: UpdateUserDto,
  config?: ClientConfiguration,
): Promise<User> {
  const response = await PBrequest(
    "/UserProto/updateUser",
    UpdateUserDto.encode(updateUserDto),
    config,
  );
  return User.decode(response);
}

export async function deleteUser(
  userId: UserId,
  config?: ClientConfiguration,
): Promise<DeleteUserResponseDto> {
  const response = await PBrequest(
    "/UserProto/deleteUser",
    UserId.encode(userId),
    config,
  );
  return DeleteUserResponseDto.decode(response);
}

//========================================//
//         UserProto JSON Client          //
//========================================//

export async function getUsersJSON(
  emptyUser: EmptyUser,
  config?: ClientConfiguration,
): Promise<GetUsersResponseDto> {
  const response = await JSONrequest(
    "/UserProto/getUsers",
    EmptyUserJSON.encode(emptyUser),
    config,
  );
  return GetUsersResponseDtoJSON.decode(response);
}

export async function getUserJSON(
  userId: UserId,
  config?: ClientConfiguration,
): Promise<User> {
  const response = await JSONrequest(
    "/UserProto/getUser",
    UserIdJSON.encode(userId),
    config,
  );
  return UserJSON.decode(response);
}

export async function getUserByEmailJSON(
  userByEmailDto: UserByEmailDto,
  config?: ClientConfiguration,
): Promise<User> {
  const response = await JSONrequest(
    "/UserProto/getUserByEmail",
    UserByEmailDtoJSON.encode(userByEmailDto),
    config,
  );
  return UserJSON.decode(response);
}

export async function createUserJSON(
  createUserDto: CreateUserDto,
  config?: ClientConfiguration,
): Promise<User> {
  const response = await JSONrequest(
    "/UserProto/createUser",
    CreateUserDtoJSON.encode(createUserDto),
    config,
  );
  return UserJSON.decode(response);
}

export async function updateUserJSON(
  updateUserDto: UpdateUserDto,
  config?: ClientConfiguration,
): Promise<User> {
  const response = await JSONrequest(
    "/UserProto/updateUser",
    UpdateUserDtoJSON.encode(updateUserDto),
    config,
  );
  return UserJSON.decode(response);
}

export async function deleteUserJSON(
  userId: UserId,
  config?: ClientConfiguration,
): Promise<DeleteUserResponseDto> {
  const response = await JSONrequest(
    "/UserProto/deleteUser",
    UserIdJSON.encode(userId),
    config,
  );
  return DeleteUserResponseDtoJSON.decode(response);
}

//========================================//
//               UserProto                //
//========================================//

export interface UserProto<Context = unknown> {
  getUsers: (
    emptyUser: EmptyUser,
    context: Context,
  ) => Promise<GetUsersResponseDto> | GetUsersResponseDto;
  getUser: (userId: UserId, context: Context) => Promise<User> | User;
  getUserByEmail: (
    userByEmailDto: UserByEmailDto,
    context: Context,
  ) => Promise<User> | User;
  createUser: (
    createUserDto: CreateUserDto,
    context: Context,
  ) => Promise<User> | User;
  updateUser: (
    updateUserDto: UpdateUserDto,
    context: Context,
  ) => Promise<User> | User;
  deleteUser: (
    userId: UserId,
    context: Context,
  ) => Promise<DeleteUserResponseDto> | DeleteUserResponseDto;
}

export function createUserProto<Context>(service: UserProto<Context>) {
  return {
    name: "UserProto",
    methods: {
      getUsers: {
        name: "getUsers",
        handler: service.getUsers,
        input: { protobuf: EmptyUser, json: EmptyUserJSON },
        output: {
          protobuf: GetUsersResponseDto,
          json: GetUsersResponseDtoJSON,
        },
      },
      getUser: {
        name: "getUser",
        handler: service.getUser,
        input: { protobuf: UserId, json: UserIdJSON },
        output: { protobuf: User, json: UserJSON },
      },
      getUserByEmail: {
        name: "getUserByEmail",
        handler: service.getUserByEmail,
        input: { protobuf: UserByEmailDto, json: UserByEmailDtoJSON },
        output: { protobuf: User, json: UserJSON },
      },
      createUser: {
        name: "createUser",
        handler: service.createUser,
        input: { protobuf: CreateUserDto, json: CreateUserDtoJSON },
        output: { protobuf: User, json: UserJSON },
      },
      updateUser: {
        name: "updateUser",
        handler: service.updateUser,
        input: { protobuf: UpdateUserDto, json: UpdateUserDtoJSON },
        output: { protobuf: User, json: UserJSON },
      },
      deleteUser: {
        name: "deleteUser",
        handler: service.deleteUser,
        input: { protobuf: UserId, json: UserIdJSON },
        output: {
          protobuf: DeleteUserResponseDto,
          json: DeleteUserResponseDtoJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const UserByEmailDto = {
  /**
   * Serializes UserByEmailDto to protobuf.
   */
  encode: function (msg: PartialDeep<UserByEmailDto>): Uint8Array {
    return UserByEmailDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UserByEmailDto from protobuf.
   */
  decode: function (bytes: ByteSource): UserByEmailDto {
    return UserByEmailDto._readMessage(
      UserByEmailDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UserByEmailDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserByEmailDto>): UserByEmailDto {
    return {
      email: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UserByEmailDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserByEmailDto,
    reader: protoscript.BinaryReader,
  ): UserByEmailDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetUsersResponseDto = {
  /**
   * Serializes GetUsersResponseDto to protobuf.
   */
  encode: function (msg: PartialDeep<GetUsersResponseDto>): Uint8Array {
    return GetUsersResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetUsersResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): GetUsersResponseDto {
    return GetUsersResponseDto._readMessage(
      GetUsersResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetUsersResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetUsersResponseDto>,
  ): GetUsersResponseDto {
    return {
      users: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetUsersResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.users?.length) {
      writer.writeRepeatedMessage(1, msg.users as any, User._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUsersResponseDto,
    reader: protoscript.BinaryReader,
  ): GetUsersResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = User.initialize();
          reader.readMessage(m, User._readMessage);
          msg.users.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteUserResponseDto = {
  /**
   * Serializes DeleteUserResponseDto to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteUserResponseDto>): Uint8Array {
    return DeleteUserResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteUserResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteUserResponseDto {
    return DeleteUserResponseDto._readMessage(
      DeleteUserResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteUserResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteUserResponseDto>,
  ): DeleteUserResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteUserResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.success) {
      writer.writeBool(1, msg.success);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteUserResponseDto,
    reader: protoscript.BinaryReader,
  ): DeleteUserResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.success = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const EmptyUser = {
  /**
   * Serializes EmptyUser to protobuf.
   */
  encode: function (_msg?: PartialDeep<EmptyUser>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes EmptyUser from protobuf.
   */
  decode: function (_bytes?: ByteSource): EmptyUser {
    return {};
  },

  /**
   * Initializes EmptyUser with all fields set to their default value.
   */
  initialize: function (msg?: Partial<EmptyUser>): EmptyUser {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<EmptyUser>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: EmptyUser,
    _reader: protoscript.BinaryReader,
  ): EmptyUser {
    return _msg;
  },
};

export const UserId = {
  /**
   * Serializes UserId to protobuf.
   */
  encode: function (msg: PartialDeep<UserId>): Uint8Array {
    return UserId._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UserId from protobuf.
   */
  decode: function (bytes: ByteSource): UserId {
    return UserId._readMessage(
      UserId.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UserId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserId>): UserId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UserId>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserId,
    reader: protoscript.BinaryReader,
  ): UserId {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateUserDto = {
  /**
   * Serializes UpdateUserDto to protobuf.
   */
  encode: function (msg: PartialDeep<UpdateUserDto>): Uint8Array {
    return UpdateUserDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateUserDto from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateUserDto {
    return UpdateUserDto._readMessage(
      UpdateUserDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpdateUserDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UpdateUserDto>): UpdateUserDto {
    return {
      id: "",
      email: "",
      role: "",
      profile: ProfileDto.initialize(),
      createdAt: protoscript.Timestamp.initialize(),
      updatedAt: protoscript.Timestamp.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateUserDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.email) {
      writer.writeString(2, msg.email);
    }
    if (msg.role) {
      writer.writeString(3, msg.role);
    }
    if (msg.profile) {
      writer.writeMessage(4, msg.profile, ProfileDto._writeMessage);
    }
    if (msg.createdAt) {
      writer.writeMessage(
        5,
        msg.createdAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    if (msg.updatedAt) {
      writer.writeMessage(
        6,
        msg.updatedAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateUserDto,
    reader: protoscript.BinaryReader,
  ): UpdateUserDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.email = reader.readString();
          break;
        }
        case 3: {
          msg.role = reader.readString();
          break;
        }
        case 4: {
          reader.readMessage(msg.profile, ProfileDto._readMessage);
          break;
        }
        case 5: {
          reader.readMessage(msg.createdAt, protoscript.Timestamp._readMessage);
          break;
        }
        case 6: {
          reader.readMessage(msg.updatedAt, protoscript.Timestamp._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateUserDto = {
  /**
   * Serializes CreateUserDto to protobuf.
   */
  encode: function (msg: PartialDeep<CreateUserDto>): Uint8Array {
    return CreateUserDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateUserDto from protobuf.
   */
  decode: function (bytes: ByteSource): CreateUserDto {
    return CreateUserDto._readMessage(
      CreateUserDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateUserDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateUserDto>): CreateUserDto {
    return {
      email: "",
      password: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    if (msg.password) {
      writer.writeString(2, msg.password);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateUserDto,
    reader: protoscript.BinaryReader,
  ): CreateUserDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        case 2: {
          msg.password = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const User = {
  /**
   * Serializes User to protobuf.
   */
  encode: function (msg: PartialDeep<User>): Uint8Array {
    return User._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes User from protobuf.
   */
  decode: function (bytes: ByteSource): User {
    return User._readMessage(
      User.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes User with all fields set to their default value.
   */
  initialize: function (msg?: Partial<User>): User {
    return {
      id: "",
      email: "",
      password: "",
      role: "",
      profile: ProfileDto.initialize(),
      createdAt: protoscript.Timestamp.initialize(),
      updatedAt: protoscript.Timestamp.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<User>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.email) {
      writer.writeString(2, msg.email);
    }
    if (msg.password) {
      writer.writeString(3, msg.password);
    }
    if (msg.role) {
      writer.writeString(4, msg.role);
    }
    if (msg.profile) {
      writer.writeMessage(5, msg.profile, ProfileDto._writeMessage);
    }
    if (msg.createdAt) {
      writer.writeMessage(
        6,
        msg.createdAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    if (msg.updatedAt) {
      writer.writeMessage(
        7,
        msg.updatedAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: User, reader: protoscript.BinaryReader): User {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.email = reader.readString();
          break;
        }
        case 3: {
          msg.password = reader.readString();
          break;
        }
        case 4: {
          msg.role = reader.readString();
          break;
        }
        case 5: {
          reader.readMessage(msg.profile, ProfileDto._readMessage);
          break;
        }
        case 6: {
          reader.readMessage(msg.createdAt, protoscript.Timestamp._readMessage);
          break;
        }
        case 7: {
          reader.readMessage(msg.updatedAt, protoscript.Timestamp._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ProfileDto = {
  /**
   * Serializes ProfileDto to protobuf.
   */
  encode: function (msg: PartialDeep<ProfileDto>): Uint8Array {
    return ProfileDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ProfileDto from protobuf.
   */
  decode: function (bytes: ByteSource): ProfileDto {
    return ProfileDto._readMessage(
      ProfileDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ProfileDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ProfileDto>): ProfileDto {
    return {
      id: "",
      ownerId: "",
      firstName: "",
      lastName: "",
      dateOfBirth: "",
      profession: "",
      employer: "",
      dateHired: "",
      employmentStatus: "",
      relationshipStatus: "",
      profilePhoto: "",
      bannerImage: "",
      hometown: "",
      city: "",
      province: "",
      country: "",
      language: "",
      mobilePhone: "",
      visibility: "",
      createdAt: protoscript.Timestamp.initialize(),
      updatedAt: protoscript.Timestamp.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ProfileDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.ownerId) {
      writer.writeString(2, msg.ownerId);
    }
    if (msg.firstName) {
      writer.writeString(3, msg.firstName);
    }
    if (msg.lastName) {
      writer.writeString(4, msg.lastName);
    }
    if (msg.dateOfBirth) {
      writer.writeString(5, msg.dateOfBirth);
    }
    if (msg.profession) {
      writer.writeString(6, msg.profession);
    }
    if (msg.employer) {
      writer.writeString(7, msg.employer);
    }
    if (msg.dateHired) {
      writer.writeString(8, msg.dateHired);
    }
    if (msg.employmentStatus) {
      writer.writeString(9, msg.employmentStatus);
    }
    if (msg.relationshipStatus) {
      writer.writeString(10, msg.relationshipStatus);
    }
    if (msg.profilePhoto) {
      writer.writeString(11, msg.profilePhoto);
    }
    if (msg.bannerImage) {
      writer.writeString(12, msg.bannerImage);
    }
    if (msg.hometown) {
      writer.writeString(13, msg.hometown);
    }
    if (msg.city) {
      writer.writeString(14, msg.city);
    }
    if (msg.province) {
      writer.writeString(15, msg.province);
    }
    if (msg.country) {
      writer.writeString(16, msg.country);
    }
    if (msg.language) {
      writer.writeString(17, msg.language);
    }
    if (msg.mobilePhone) {
      writer.writeString(18, msg.mobilePhone);
    }
    if (msg.visibility) {
      writer.writeString(19, msg.visibility);
    }
    if (msg.createdAt) {
      writer.writeMessage(
        20,
        msg.createdAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    if (msg.updatedAt) {
      writer.writeMessage(
        21,
        msg.updatedAt,
        protoscript.Timestamp._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ProfileDto,
    reader: protoscript.BinaryReader,
  ): ProfileDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.ownerId = reader.readString();
          break;
        }
        case 3: {
          msg.firstName = reader.readString();
          break;
        }
        case 4: {
          msg.lastName = reader.readString();
          break;
        }
        case 5: {
          msg.dateOfBirth = reader.readString();
          break;
        }
        case 6: {
          msg.profession = reader.readString();
          break;
        }
        case 7: {
          msg.employer = reader.readString();
          break;
        }
        case 8: {
          msg.dateHired = reader.readString();
          break;
        }
        case 9: {
          msg.employmentStatus = reader.readString();
          break;
        }
        case 10: {
          msg.relationshipStatus = reader.readString();
          break;
        }
        case 11: {
          msg.profilePhoto = reader.readString();
          break;
        }
        case 12: {
          msg.bannerImage = reader.readString();
          break;
        }
        case 13: {
          msg.hometown = reader.readString();
          break;
        }
        case 14: {
          msg.city = reader.readString();
          break;
        }
        case 15: {
          msg.province = reader.readString();
          break;
        }
        case 16: {
          msg.country = reader.readString();
          break;
        }
        case 17: {
          msg.language = reader.readString();
          break;
        }
        case 18: {
          msg.mobilePhone = reader.readString();
          break;
        }
        case 19: {
          msg.visibility = reader.readString();
          break;
        }
        case 20: {
          reader.readMessage(msg.createdAt, protoscript.Timestamp._readMessage);
          break;
        }
        case 21: {
          reader.readMessage(msg.updatedAt, protoscript.Timestamp._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const UserByEmailDtoJSON = {
  /**
   * Serializes UserByEmailDto to JSON.
   */
  encode: function (msg: PartialDeep<UserByEmailDto>): string {
    return JSON.stringify(UserByEmailDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes UserByEmailDto from JSON.
   */
  decode: function (json: string): UserByEmailDto {
    return UserByEmailDtoJSON._readMessage(
      UserByEmailDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UserByEmailDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserByEmailDto>): UserByEmailDto {
    return {
      email: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UserByEmailDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.email) {
      json["email"] = msg.email;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserByEmailDto, json: any): UserByEmailDto {
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    return msg;
  },
};

export const GetUsersResponseDtoJSON = {
  /**
   * Serializes GetUsersResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<GetUsersResponseDto>): string {
    return JSON.stringify(GetUsersResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetUsersResponseDto from JSON.
   */
  decode: function (json: string): GetUsersResponseDto {
    return GetUsersResponseDtoJSON._readMessage(
      GetUsersResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetUsersResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetUsersResponseDto>,
  ): GetUsersResponseDto {
    return {
      users: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetUsersResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.users?.length) {
      json["users"] = msg.users.map(UserJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUsersResponseDto,
    json: any,
  ): GetUsersResponseDto {
    const _users_ = json["users"];
    if (_users_) {
      for (const item of _users_) {
        const m = UserJSON.initialize();
        UserJSON._readMessage(m, item);
        msg.users.push(m);
      }
    }
    return msg;
  },
};

export const DeleteUserResponseDtoJSON = {
  /**
   * Serializes DeleteUserResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<DeleteUserResponseDto>): string {
    return JSON.stringify(DeleteUserResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteUserResponseDto from JSON.
   */
  decode: function (json: string): DeleteUserResponseDto {
    return DeleteUserResponseDtoJSON._readMessage(
      DeleteUserResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteUserResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteUserResponseDto>,
  ): DeleteUserResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteUserResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.success) {
      json["success"] = msg.success;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteUserResponseDto,
    json: any,
  ): DeleteUserResponseDto {
    const _success_ = json["success"];
    if (_success_) {
      msg.success = _success_;
    }
    return msg;
  },
};

export const EmptyUserJSON = {
  /**
   * Serializes EmptyUser to JSON.
   */
  encode: function (_msg?: PartialDeep<EmptyUser>): string {
    return "{}";
  },

  /**
   * Deserializes EmptyUser from JSON.
   */
  decode: function (_json?: string): EmptyUser {
    return {};
  },

  /**
   * Initializes EmptyUser with all fields set to their default value.
   */
  initialize: function (msg?: Partial<EmptyUser>): EmptyUser {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<EmptyUser>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: EmptyUser, _json: any): EmptyUser {
    return msg;
  },
};

export const UserIdJSON = {
  /**
   * Serializes UserId to JSON.
   */
  encode: function (msg: PartialDeep<UserId>): string {
    return JSON.stringify(UserIdJSON._writeMessage(msg));
  },

  /**
   * Deserializes UserId from JSON.
   */
  decode: function (json: string): UserId {
    return UserIdJSON._readMessage(UserIdJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes UserId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserId>): UserId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<UserId>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserId, json: any): UserId {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const UpdateUserDtoJSON = {
  /**
   * Serializes UpdateUserDto to JSON.
   */
  encode: function (msg: PartialDeep<UpdateUserDto>): string {
    return JSON.stringify(UpdateUserDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateUserDto from JSON.
   */
  decode: function (json: string): UpdateUserDto {
    return UpdateUserDtoJSON._readMessage(
      UpdateUserDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpdateUserDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UpdateUserDto>): UpdateUserDto {
    return {
      id: "",
      email: "",
      role: "",
      profile: ProfileDtoJSON.initialize(),
      createdAt: protoscript.TimestampJSON.initialize(),
      updatedAt: protoscript.TimestampJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateUserDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.role) {
      json["role"] = msg.role;
    }
    if (msg.profile) {
      const _profile_ = ProfileDtoJSON._writeMessage(msg.profile);
      if (Object.keys(_profile_).length > 0) {
        json["profile"] = _profile_;
      }
    }
    if (msg.createdAt && msg.createdAt.seconds && msg.createdAt.nanos) {
      json["createdAt"] = protoscript.serializeTimestamp(msg.createdAt);
    }
    if (msg.updatedAt && msg.updatedAt.seconds && msg.updatedAt.nanos) {
      json["updatedAt"] = protoscript.serializeTimestamp(msg.updatedAt);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UpdateUserDto, json: any): UpdateUserDto {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _role_ = json["role"];
    if (_role_) {
      msg.role = _role_;
    }
    const _profile_ = json["profile"];
    if (_profile_) {
      ProfileDtoJSON._readMessage(msg.profile, _profile_);
    }
    const _createdAt_ = json["createdAt"] ?? json["created_at"];
    if (_createdAt_) {
      msg.createdAt = protoscript.parseTimestamp(_createdAt_);
    }
    const _updatedAt_ = json["updatedAt"] ?? json["updated_at"];
    if (_updatedAt_) {
      msg.updatedAt = protoscript.parseTimestamp(_updatedAt_);
    }
    return msg;
  },
};

export const CreateUserDtoJSON = {
  /**
   * Serializes CreateUserDto to JSON.
   */
  encode: function (msg: PartialDeep<CreateUserDto>): string {
    return JSON.stringify(CreateUserDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateUserDto from JSON.
   */
  decode: function (json: string): CreateUserDto {
    return CreateUserDtoJSON._readMessage(
      CreateUserDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateUserDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateUserDto>): CreateUserDto {
    return {
      email: "",
      password: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.password) {
      json["password"] = msg.password;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: CreateUserDto, json: any): CreateUserDto {
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _password_ = json["password"];
    if (_password_) {
      msg.password = _password_;
    }
    return msg;
  },
};

export const UserJSON = {
  /**
   * Serializes User to JSON.
   */
  encode: function (msg: PartialDeep<User>): string {
    return JSON.stringify(UserJSON._writeMessage(msg));
  },

  /**
   * Deserializes User from JSON.
   */
  decode: function (json: string): User {
    return UserJSON._readMessage(UserJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes User with all fields set to their default value.
   */
  initialize: function (msg?: Partial<User>): User {
    return {
      id: "",
      email: "",
      password: "",
      role: "",
      profile: ProfileDtoJSON.initialize(),
      createdAt: protoscript.TimestampJSON.initialize(),
      updatedAt: protoscript.TimestampJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<User>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.password) {
      json["password"] = msg.password;
    }
    if (msg.role) {
      json["role"] = msg.role;
    }
    if (msg.profile) {
      const _profile_ = ProfileDtoJSON._writeMessage(msg.profile);
      if (Object.keys(_profile_).length > 0) {
        json["profile"] = _profile_;
      }
    }
    if (msg.createdAt && msg.createdAt.seconds && msg.createdAt.nanos) {
      json["createdAt"] = protoscript.serializeTimestamp(msg.createdAt);
    }
    if (msg.updatedAt && msg.updatedAt.seconds && msg.updatedAt.nanos) {
      json["updatedAt"] = protoscript.serializeTimestamp(msg.updatedAt);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: User, json: any): User {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _password_ = json["password"];
    if (_password_) {
      msg.password = _password_;
    }
    const _role_ = json["role"];
    if (_role_) {
      msg.role = _role_;
    }
    const _profile_ = json["profile"];
    if (_profile_) {
      ProfileDtoJSON._readMessage(msg.profile, _profile_);
    }
    const _createdAt_ = json["createdAt"] ?? json["created_at"];
    if (_createdAt_) {
      msg.createdAt = protoscript.parseTimestamp(_createdAt_);
    }
    const _updatedAt_ = json["updatedAt"] ?? json["updated_at"];
    if (_updatedAt_) {
      msg.updatedAt = protoscript.parseTimestamp(_updatedAt_);
    }
    return msg;
  },
};

export const ProfileDtoJSON = {
  /**
   * Serializes ProfileDto to JSON.
   */
  encode: function (msg: PartialDeep<ProfileDto>): string {
    return JSON.stringify(ProfileDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes ProfileDto from JSON.
   */
  decode: function (json: string): ProfileDto {
    return ProfileDtoJSON._readMessage(
      ProfileDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ProfileDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ProfileDto>): ProfileDto {
    return {
      id: "",
      ownerId: "",
      firstName: "",
      lastName: "",
      dateOfBirth: "",
      profession: "",
      employer: "",
      dateHired: "",
      employmentStatus: "",
      relationshipStatus: "",
      profilePhoto: "",
      bannerImage: "",
      hometown: "",
      city: "",
      province: "",
      country: "",
      language: "",
      mobilePhone: "",
      visibility: "",
      createdAt: protoscript.TimestampJSON.initialize(),
      updatedAt: protoscript.TimestampJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ProfileDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.ownerId) {
      json["ownerId"] = msg.ownerId;
    }
    if (msg.firstName) {
      json["firstName"] = msg.firstName;
    }
    if (msg.lastName) {
      json["lastName"] = msg.lastName;
    }
    if (msg.dateOfBirth) {
      json["dateOfBirth"] = msg.dateOfBirth;
    }
    if (msg.profession) {
      json["profession"] = msg.profession;
    }
    if (msg.employer) {
      json["employer"] = msg.employer;
    }
    if (msg.dateHired) {
      json["dateHired"] = msg.dateHired;
    }
    if (msg.employmentStatus) {
      json["employmentStatus"] = msg.employmentStatus;
    }
    if (msg.relationshipStatus) {
      json["relationshipStatus"] = msg.relationshipStatus;
    }
    if (msg.profilePhoto) {
      json["profilePhoto"] = msg.profilePhoto;
    }
    if (msg.bannerImage) {
      json["bannerImage"] = msg.bannerImage;
    }
    if (msg.hometown) {
      json["hometown"] = msg.hometown;
    }
    if (msg.city) {
      json["city"] = msg.city;
    }
    if (msg.province) {
      json["province"] = msg.province;
    }
    if (msg.country) {
      json["country"] = msg.country;
    }
    if (msg.language) {
      json["language"] = msg.language;
    }
    if (msg.mobilePhone) {
      json["mobilePhone"] = msg.mobilePhone;
    }
    if (msg.visibility) {
      json["visibility"] = msg.visibility;
    }
    if (msg.createdAt && msg.createdAt.seconds && msg.createdAt.nanos) {
      json["createdAt"] = protoscript.serializeTimestamp(msg.createdAt);
    }
    if (msg.updatedAt && msg.updatedAt.seconds && msg.updatedAt.nanos) {
      json["updatedAt"] = protoscript.serializeTimestamp(msg.updatedAt);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ProfileDto, json: any): ProfileDto {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _ownerId_ = json["ownerId"];
    if (_ownerId_) {
      msg.ownerId = _ownerId_;
    }
    const _firstName_ = json["firstName"];
    if (_firstName_) {
      msg.firstName = _firstName_;
    }
    const _lastName_ = json["lastName"];
    if (_lastName_) {
      msg.lastName = _lastName_;
    }
    const _dateOfBirth_ = json["dateOfBirth"];
    if (_dateOfBirth_) {
      msg.dateOfBirth = _dateOfBirth_;
    }
    const _profession_ = json["profession"];
    if (_profession_) {
      msg.profession = _profession_;
    }
    const _employer_ = json["employer"];
    if (_employer_) {
      msg.employer = _employer_;
    }
    const _dateHired_ = json["dateHired"];
    if (_dateHired_) {
      msg.dateHired = _dateHired_;
    }
    const _employmentStatus_ = json["employmentStatus"];
    if (_employmentStatus_) {
      msg.employmentStatus = _employmentStatus_;
    }
    const _relationshipStatus_ = json["relationshipStatus"];
    if (_relationshipStatus_) {
      msg.relationshipStatus = _relationshipStatus_;
    }
    const _profilePhoto_ = json["profilePhoto"];
    if (_profilePhoto_) {
      msg.profilePhoto = _profilePhoto_;
    }
    const _bannerImage_ = json["bannerImage"];
    if (_bannerImage_) {
      msg.bannerImage = _bannerImage_;
    }
    const _hometown_ = json["hometown"];
    if (_hometown_) {
      msg.hometown = _hometown_;
    }
    const _city_ = json["city"];
    if (_city_) {
      msg.city = _city_;
    }
    const _province_ = json["province"];
    if (_province_) {
      msg.province = _province_;
    }
    const _country_ = json["country"];
    if (_country_) {
      msg.country = _country_;
    }
    const _language_ = json["language"];
    if (_language_) {
      msg.language = _language_;
    }
    const _mobilePhone_ = json["mobilePhone"];
    if (_mobilePhone_) {
      msg.mobilePhone = _mobilePhone_;
    }
    const _visibility_ = json["visibility"];
    if (_visibility_) {
      msg.visibility = _visibility_;
    }
    const _createdAt_ = json["createdAt"];
    if (_createdAt_) {
      msg.createdAt = protoscript.parseTimestamp(_createdAt_);
    }
    const _updatedAt_ = json["updatedAt"];
    if (_updatedAt_) {
      msg.updatedAt = protoscript.parseTimestamp(_updatedAt_);
    }
    return msg;
  },
};
