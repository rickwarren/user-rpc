// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/protos/vid.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface VidsResponseDto {
  vids: VidDto[];
}

export interface DeleteVidResponseDto {
  success: boolean;
}

export interface VidId {
  id: string;
}

export interface CreateVidDto {
  userId: string;
  localFileId: string;
  views: number;
}

export interface UpdateVidDto {
  id: string;
  userId: string;
  localFileId: string;
  views: number;
}

export interface VidDto {
  id: string;
  userId: string;
  localFileId: string;
  views: number;
}

//========================================//
//        VidProto Protobuf Client        //
//========================================//

export async function getVids(
  vidId: VidId,
  config?: ClientConfiguration,
): Promise<VidsResponseDto> {
  const response = await PBrequest(
    "/VidProto/getVids",
    VidId.encode(vidId),
    config,
  );
  return VidsResponseDto.decode(response);
}

export async function getVid(
  vidId: VidId,
  config?: ClientConfiguration,
): Promise<VidDto> {
  const response = await PBrequest(
    "/VidProto/getVid",
    VidId.encode(vidId),
    config,
  );
  return VidDto.decode(response);
}

export async function createVid(
  createVidDto: CreateVidDto,
  config?: ClientConfiguration,
): Promise<VidDto> {
  const response = await PBrequest(
    "/VidProto/createVid",
    CreateVidDto.encode(createVidDto),
    config,
  );
  return VidDto.decode(response);
}

export async function updateVid(
  updateVidDto: UpdateVidDto,
  config?: ClientConfiguration,
): Promise<VidDto> {
  const response = await PBrequest(
    "/VidProto/updateVid",
    UpdateVidDto.encode(updateVidDto),
    config,
  );
  return VidDto.decode(response);
}

export async function deleteVid(
  vidId: VidId,
  config?: ClientConfiguration,
): Promise<DeleteVidResponseDto> {
  const response = await PBrequest(
    "/VidProto/deleteVid",
    VidId.encode(vidId),
    config,
  );
  return DeleteVidResponseDto.decode(response);
}

//========================================//
//          VidProto JSON Client          //
//========================================//

export async function getVidsJSON(
  vidId: VidId,
  config?: ClientConfiguration,
): Promise<VidsResponseDto> {
  const response = await JSONrequest(
    "/VidProto/getVids",
    VidIdJSON.encode(vidId),
    config,
  );
  return VidsResponseDtoJSON.decode(response);
}

export async function getVidJSON(
  vidId: VidId,
  config?: ClientConfiguration,
): Promise<VidDto> {
  const response = await JSONrequest(
    "/VidProto/getVid",
    VidIdJSON.encode(vidId),
    config,
  );
  return VidDtoJSON.decode(response);
}

export async function createVidJSON(
  createVidDto: CreateVidDto,
  config?: ClientConfiguration,
): Promise<VidDto> {
  const response = await JSONrequest(
    "/VidProto/createVid",
    CreateVidDtoJSON.encode(createVidDto),
    config,
  );
  return VidDtoJSON.decode(response);
}

export async function updateVidJSON(
  updateVidDto: UpdateVidDto,
  config?: ClientConfiguration,
): Promise<VidDto> {
  const response = await JSONrequest(
    "/VidProto/updateVid",
    UpdateVidDtoJSON.encode(updateVidDto),
    config,
  );
  return VidDtoJSON.decode(response);
}

export async function deleteVidJSON(
  vidId: VidId,
  config?: ClientConfiguration,
): Promise<DeleteVidResponseDto> {
  const response = await JSONrequest(
    "/VidProto/deleteVid",
    VidIdJSON.encode(vidId),
    config,
  );
  return DeleteVidResponseDtoJSON.decode(response);
}

//========================================//
//                VidProto                //
//========================================//

export interface VidProto<Context = unknown> {
  getVids: (
    vidId: VidId,
    context: Context,
  ) => Promise<VidsResponseDto> | VidsResponseDto;
  getVid: (vidId: VidId, context: Context) => Promise<VidDto> | VidDto;
  createVid: (
    createVidDto: CreateVidDto,
    context: Context,
  ) => Promise<VidDto> | VidDto;
  updateVid: (
    updateVidDto: UpdateVidDto,
    context: Context,
  ) => Promise<VidDto> | VidDto;
  deleteVid: (
    vidId: VidId,
    context: Context,
  ) => Promise<DeleteVidResponseDto> | DeleteVidResponseDto;
}

export function createVidProto<Context>(service: VidProto<Context>) {
  return {
    name: "VidProto",
    methods: {
      getVids: {
        name: "getVids",
        handler: service.getVids,
        input: { protobuf: VidId, json: VidIdJSON },
        output: { protobuf: VidsResponseDto, json: VidsResponseDtoJSON },
      },
      getVid: {
        name: "getVid",
        handler: service.getVid,
        input: { protobuf: VidId, json: VidIdJSON },
        output: { protobuf: VidDto, json: VidDtoJSON },
      },
      createVid: {
        name: "createVid",
        handler: service.createVid,
        input: { protobuf: CreateVidDto, json: CreateVidDtoJSON },
        output: { protobuf: VidDto, json: VidDtoJSON },
      },
      updateVid: {
        name: "updateVid",
        handler: service.updateVid,
        input: { protobuf: UpdateVidDto, json: UpdateVidDtoJSON },
        output: { protobuf: VidDto, json: VidDtoJSON },
      },
      deleteVid: {
        name: "deleteVid",
        handler: service.deleteVid,
        input: { protobuf: VidId, json: VidIdJSON },
        output: {
          protobuf: DeleteVidResponseDto,
          json: DeleteVidResponseDtoJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const VidsResponseDto = {
  /**
   * Serializes VidsResponseDto to protobuf.
   */
  encode: function (msg: PartialDeep<VidsResponseDto>): Uint8Array {
    return VidsResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes VidsResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): VidsResponseDto {
    return VidsResponseDto._readMessage(
      VidsResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes VidsResponseDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<VidsResponseDto>): VidsResponseDto {
    return {
      vids: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<VidsResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.vids?.length) {
      writer.writeRepeatedMessage(1, msg.vids as any, VidDto._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: VidsResponseDto,
    reader: protoscript.BinaryReader,
  ): VidsResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = VidDto.initialize();
          reader.readMessage(m, VidDto._readMessage);
          msg.vids.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteVidResponseDto = {
  /**
   * Serializes DeleteVidResponseDto to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteVidResponseDto>): Uint8Array {
    return DeleteVidResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteVidResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteVidResponseDto {
    return DeleteVidResponseDto._readMessage(
      DeleteVidResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteVidResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteVidResponseDto>,
  ): DeleteVidResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteVidResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.success) {
      writer.writeBool(1, msg.success);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteVidResponseDto,
    reader: protoscript.BinaryReader,
  ): DeleteVidResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.success = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const VidId = {
  /**
   * Serializes VidId to protobuf.
   */
  encode: function (msg: PartialDeep<VidId>): Uint8Array {
    return VidId._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes VidId from protobuf.
   */
  decode: function (bytes: ByteSource): VidId {
    return VidId._readMessage(
      VidId.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes VidId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<VidId>): VidId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<VidId>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: VidId, reader: protoscript.BinaryReader): VidId {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateVidDto = {
  /**
   * Serializes CreateVidDto to protobuf.
   */
  encode: function (msg: PartialDeep<CreateVidDto>): Uint8Array {
    return CreateVidDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateVidDto from protobuf.
   */
  decode: function (bytes: ByteSource): CreateVidDto {
    return CreateVidDto._readMessage(
      CreateVidDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateVidDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateVidDto>): CreateVidDto {
    return {
      userId: "",
      localFileId: "",
      views: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateVidDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    if (msg.localFileId) {
      writer.writeString(2, msg.localFileId);
    }
    if (msg.views) {
      writer.writeInt32(3, msg.views);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateVidDto,
    reader: protoscript.BinaryReader,
  ): CreateVidDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        case 2: {
          msg.localFileId = reader.readString();
          break;
        }
        case 3: {
          msg.views = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateVidDto = {
  /**
   * Serializes UpdateVidDto to protobuf.
   */
  encode: function (msg: PartialDeep<UpdateVidDto>): Uint8Array {
    return UpdateVidDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateVidDto from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateVidDto {
    return UpdateVidDto._readMessage(
      UpdateVidDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpdateVidDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UpdateVidDto>): UpdateVidDto {
    return {
      id: "",
      userId: "",
      localFileId: "",
      views: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateVidDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.userId) {
      writer.writeString(2, msg.userId);
    }
    if (msg.localFileId) {
      writer.writeString(3, msg.localFileId);
    }
    if (msg.views) {
      writer.writeInt32(4, msg.views);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateVidDto,
    reader: protoscript.BinaryReader,
  ): UpdateVidDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.userId = reader.readString();
          break;
        }
        case 3: {
          msg.localFileId = reader.readString();
          break;
        }
        case 4: {
          msg.views = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const VidDto = {
  /**
   * Serializes VidDto to protobuf.
   */
  encode: function (msg: PartialDeep<VidDto>): Uint8Array {
    return VidDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes VidDto from protobuf.
   */
  decode: function (bytes: ByteSource): VidDto {
    return VidDto._readMessage(
      VidDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes VidDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<VidDto>): VidDto {
    return {
      id: "",
      userId: "",
      localFileId: "",
      views: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<VidDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.userId) {
      writer.writeString(2, msg.userId);
    }
    if (msg.localFileId) {
      writer.writeString(3, msg.localFileId);
    }
    if (msg.views) {
      writer.writeInt32(4, msg.views);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: VidDto,
    reader: protoscript.BinaryReader,
  ): VidDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.userId = reader.readString();
          break;
        }
        case 3: {
          msg.localFileId = reader.readString();
          break;
        }
        case 4: {
          msg.views = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const VidsResponseDtoJSON = {
  /**
   * Serializes VidsResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<VidsResponseDto>): string {
    return JSON.stringify(VidsResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes VidsResponseDto from JSON.
   */
  decode: function (json: string): VidsResponseDto {
    return VidsResponseDtoJSON._readMessage(
      VidsResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes VidsResponseDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<VidsResponseDto>): VidsResponseDto {
    return {
      vids: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<VidsResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.vids?.length) {
      json["vids"] = msg.vids.map(VidDtoJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: VidsResponseDto, json: any): VidsResponseDto {
    const _vids_ = json["vids"];
    if (_vids_) {
      for (const item of _vids_) {
        const m = VidDtoJSON.initialize();
        VidDtoJSON._readMessage(m, item);
        msg.vids.push(m);
      }
    }
    return msg;
  },
};

export const DeleteVidResponseDtoJSON = {
  /**
   * Serializes DeleteVidResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<DeleteVidResponseDto>): string {
    return JSON.stringify(DeleteVidResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteVidResponseDto from JSON.
   */
  decode: function (json: string): DeleteVidResponseDto {
    return DeleteVidResponseDtoJSON._readMessage(
      DeleteVidResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteVidResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteVidResponseDto>,
  ): DeleteVidResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteVidResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.success) {
      json["success"] = msg.success;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteVidResponseDto,
    json: any,
  ): DeleteVidResponseDto {
    const _success_ = json["success"];
    if (_success_) {
      msg.success = _success_;
    }
    return msg;
  },
};

export const VidIdJSON = {
  /**
   * Serializes VidId to JSON.
   */
  encode: function (msg: PartialDeep<VidId>): string {
    return JSON.stringify(VidIdJSON._writeMessage(msg));
  },

  /**
   * Deserializes VidId from JSON.
   */
  decode: function (json: string): VidId {
    return VidIdJSON._readMessage(VidIdJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes VidId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<VidId>): VidId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<VidId>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: VidId, json: any): VidId {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const CreateVidDtoJSON = {
  /**
   * Serializes CreateVidDto to JSON.
   */
  encode: function (msg: PartialDeep<CreateVidDto>): string {
    return JSON.stringify(CreateVidDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateVidDto from JSON.
   */
  decode: function (json: string): CreateVidDto {
    return CreateVidDtoJSON._readMessage(
      CreateVidDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateVidDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateVidDto>): CreateVidDto {
    return {
      userId: "",
      localFileId: "",
      views: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateVidDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.localFileId) {
      json["localFileId"] = msg.localFileId;
    }
    if (msg.views) {
      json["views"] = msg.views;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: CreateVidDto, json: any): CreateVidDto {
    const _userId_ = json["userId"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _localFileId_ = json["localFileId"];
    if (_localFileId_) {
      msg.localFileId = _localFileId_;
    }
    const _views_ = json["views"];
    if (_views_) {
      msg.views = protoscript.parseNumber(_views_);
    }
    return msg;
  },
};

export const UpdateVidDtoJSON = {
  /**
   * Serializes UpdateVidDto to JSON.
   */
  encode: function (msg: PartialDeep<UpdateVidDto>): string {
    return JSON.stringify(UpdateVidDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateVidDto from JSON.
   */
  decode: function (json: string): UpdateVidDto {
    return UpdateVidDtoJSON._readMessage(
      UpdateVidDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpdateVidDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UpdateVidDto>): UpdateVidDto {
    return {
      id: "",
      userId: "",
      localFileId: "",
      views: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateVidDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.localFileId) {
      json["localFileId"] = msg.localFileId;
    }
    if (msg.views) {
      json["views"] = msg.views;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UpdateVidDto, json: any): UpdateVidDto {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _userId_ = json["userId"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _localFileId_ = json["localFileId"];
    if (_localFileId_) {
      msg.localFileId = _localFileId_;
    }
    const _views_ = json["views"];
    if (_views_) {
      msg.views = protoscript.parseNumber(_views_);
    }
    return msg;
  },
};

export const VidDtoJSON = {
  /**
   * Serializes VidDto to JSON.
   */
  encode: function (msg: PartialDeep<VidDto>): string {
    return JSON.stringify(VidDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes VidDto from JSON.
   */
  decode: function (json: string): VidDto {
    return VidDtoJSON._readMessage(VidDtoJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes VidDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<VidDto>): VidDto {
    return {
      id: "",
      userId: "",
      localFileId: "",
      views: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<VidDto>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.localFileId) {
      json["localFileId"] = msg.localFileId;
    }
    if (msg.views) {
      json["views"] = msg.views;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: VidDto, json: any): VidDto {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _userId_ = json["userId"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _localFileId_ = json["localFileId"];
    if (_localFileId_) {
      msg.localFileId = _localFileId_;
    }
    const _views_ = json["views"];
    if (_views_) {
      msg.views = protoscript.parseNumber(_views_);
    }
    return msg;
  },
};
