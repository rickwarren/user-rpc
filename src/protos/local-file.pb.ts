// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/protos/local-file.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface DeleteLocalFileResponseDto {
  success: boolean;
}

export interface FileId {
  id: string;
}

export interface CreateLocalFileDto {
  filename: string;
  path: string;
  mimetype: string;
}

export interface LocalFileDto {
  id: string;
  filename: string;
  path: string;
  mimetype: string;
  createdAt: string;
  updatedAt: string;
}

//========================================//
//     LocalFileProto Protobuf Client     //
//========================================//

export async function getLocalFile(
  fileId: FileId,
  config?: ClientConfiguration,
): Promise<LocalFileDto> {
  const response = await PBrequest(
    "/LocalFileProto/getLocalFile",
    FileId.encode(fileId),
    config,
  );
  return LocalFileDto.decode(response);
}

export async function createLocalFile(
  createLocalFileDto: CreateLocalFileDto,
  config?: ClientConfiguration,
): Promise<LocalFileDto> {
  const response = await PBrequest(
    "/LocalFileProto/createLocalFile",
    CreateLocalFileDto.encode(createLocalFileDto),
    config,
  );
  return LocalFileDto.decode(response);
}

export async function deleteLocalFile(
  fileId: FileId,
  config?: ClientConfiguration,
): Promise<DeleteLocalFileResponseDto> {
  const response = await PBrequest(
    "/LocalFileProto/deleteLocalFile",
    FileId.encode(fileId),
    config,
  );
  return DeleteLocalFileResponseDto.decode(response);
}

//========================================//
//       LocalFileProto JSON Client       //
//========================================//

export async function getLocalFileJSON(
  fileId: FileId,
  config?: ClientConfiguration,
): Promise<LocalFileDto> {
  const response = await JSONrequest(
    "/LocalFileProto/getLocalFile",
    FileIdJSON.encode(fileId),
    config,
  );
  return LocalFileDtoJSON.decode(response);
}

export async function createLocalFileJSON(
  createLocalFileDto: CreateLocalFileDto,
  config?: ClientConfiguration,
): Promise<LocalFileDto> {
  const response = await JSONrequest(
    "/LocalFileProto/createLocalFile",
    CreateLocalFileDtoJSON.encode(createLocalFileDto),
    config,
  );
  return LocalFileDtoJSON.decode(response);
}

export async function deleteLocalFileJSON(
  fileId: FileId,
  config?: ClientConfiguration,
): Promise<DeleteLocalFileResponseDto> {
  const response = await JSONrequest(
    "/LocalFileProto/deleteLocalFile",
    FileIdJSON.encode(fileId),
    config,
  );
  return DeleteLocalFileResponseDtoJSON.decode(response);
}

//========================================//
//             LocalFileProto             //
//========================================//

export interface LocalFileProto<Context = unknown> {
  getLocalFile: (
    fileId: FileId,
    context: Context,
  ) => Promise<LocalFileDto> | LocalFileDto;
  createLocalFile: (
    createLocalFileDto: CreateLocalFileDto,
    context: Context,
  ) => Promise<LocalFileDto> | LocalFileDto;
  deleteLocalFile: (
    fileId: FileId,
    context: Context,
  ) => Promise<DeleteLocalFileResponseDto> | DeleteLocalFileResponseDto;
}

export function createLocalFileProto<Context>(
  service: LocalFileProto<Context>,
) {
  return {
    name: "LocalFileProto",
    methods: {
      getLocalFile: {
        name: "getLocalFile",
        handler: service.getLocalFile,
        input: { protobuf: FileId, json: FileIdJSON },
        output: { protobuf: LocalFileDto, json: LocalFileDtoJSON },
      },
      createLocalFile: {
        name: "createLocalFile",
        handler: service.createLocalFile,
        input: { protobuf: CreateLocalFileDto, json: CreateLocalFileDtoJSON },
        output: { protobuf: LocalFileDto, json: LocalFileDtoJSON },
      },
      deleteLocalFile: {
        name: "deleteLocalFile",
        handler: service.deleteLocalFile,
        input: { protobuf: FileId, json: FileIdJSON },
        output: {
          protobuf: DeleteLocalFileResponseDto,
          json: DeleteLocalFileResponseDtoJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const DeleteLocalFileResponseDto = {
  /**
   * Serializes DeleteLocalFileResponseDto to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteLocalFileResponseDto>): Uint8Array {
    return DeleteLocalFileResponseDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteLocalFileResponseDto from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteLocalFileResponseDto {
    return DeleteLocalFileResponseDto._readMessage(
      DeleteLocalFileResponseDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteLocalFileResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteLocalFileResponseDto>,
  ): DeleteLocalFileResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteLocalFileResponseDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.success) {
      writer.writeBool(1, msg.success);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteLocalFileResponseDto,
    reader: protoscript.BinaryReader,
  ): DeleteLocalFileResponseDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.success = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FileId = {
  /**
   * Serializes FileId to protobuf.
   */
  encode: function (msg: PartialDeep<FileId>): Uint8Array {
    return FileId._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FileId from protobuf.
   */
  decode: function (bytes: ByteSource): FileId {
    return FileId._readMessage(
      FileId.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FileId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FileId>): FileId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FileId>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FileId,
    reader: protoscript.BinaryReader,
  ): FileId {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateLocalFileDto = {
  /**
   * Serializes CreateLocalFileDto to protobuf.
   */
  encode: function (msg: PartialDeep<CreateLocalFileDto>): Uint8Array {
    return CreateLocalFileDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateLocalFileDto from protobuf.
   */
  decode: function (bytes: ByteSource): CreateLocalFileDto {
    return CreateLocalFileDto._readMessage(
      CreateLocalFileDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateLocalFileDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateLocalFileDto>): CreateLocalFileDto {
    return {
      filename: "",
      path: "",
      mimetype: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateLocalFileDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.filename) {
      writer.writeString(1, msg.filename);
    }
    if (msg.path) {
      writer.writeString(2, msg.path);
    }
    if (msg.mimetype) {
      writer.writeString(3, msg.mimetype);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateLocalFileDto,
    reader: protoscript.BinaryReader,
  ): CreateLocalFileDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.filename = reader.readString();
          break;
        }
        case 2: {
          msg.path = reader.readString();
          break;
        }
        case 3: {
          msg.mimetype = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const LocalFileDto = {
  /**
   * Serializes LocalFileDto to protobuf.
   */
  encode: function (msg: PartialDeep<LocalFileDto>): Uint8Array {
    return LocalFileDto._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes LocalFileDto from protobuf.
   */
  decode: function (bytes: ByteSource): LocalFileDto {
    return LocalFileDto._readMessage(
      LocalFileDto.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes LocalFileDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<LocalFileDto>): LocalFileDto {
    return {
      id: "",
      filename: "",
      path: "",
      mimetype: "",
      createdAt: "",
      updatedAt: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<LocalFileDto>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.filename) {
      writer.writeString(2, msg.filename);
    }
    if (msg.path) {
      writer.writeString(3, msg.path);
    }
    if (msg.mimetype) {
      writer.writeString(4, msg.mimetype);
    }
    if (msg.createdAt) {
      writer.writeString(5, msg.createdAt);
    }
    if (msg.updatedAt) {
      writer.writeString(6, msg.updatedAt);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: LocalFileDto,
    reader: protoscript.BinaryReader,
  ): LocalFileDto {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.filename = reader.readString();
          break;
        }
        case 3: {
          msg.path = reader.readString();
          break;
        }
        case 4: {
          msg.mimetype = reader.readString();
          break;
        }
        case 5: {
          msg.createdAt = reader.readString();
          break;
        }
        case 6: {
          msg.updatedAt = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const DeleteLocalFileResponseDtoJSON = {
  /**
   * Serializes DeleteLocalFileResponseDto to JSON.
   */
  encode: function (msg: PartialDeep<DeleteLocalFileResponseDto>): string {
    return JSON.stringify(DeleteLocalFileResponseDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteLocalFileResponseDto from JSON.
   */
  decode: function (json: string): DeleteLocalFileResponseDto {
    return DeleteLocalFileResponseDtoJSON._readMessage(
      DeleteLocalFileResponseDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteLocalFileResponseDto with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteLocalFileResponseDto>,
  ): DeleteLocalFileResponseDto {
    return {
      success: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteLocalFileResponseDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.success) {
      json["success"] = msg.success;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteLocalFileResponseDto,
    json: any,
  ): DeleteLocalFileResponseDto {
    const _success_ = json["success"];
    if (_success_) {
      msg.success = _success_;
    }
    return msg;
  },
};

export const FileIdJSON = {
  /**
   * Serializes FileId to JSON.
   */
  encode: function (msg: PartialDeep<FileId>): string {
    return JSON.stringify(FileIdJSON._writeMessage(msg));
  },

  /**
   * Deserializes FileId from JSON.
   */
  decode: function (json: string): FileId {
    return FileIdJSON._readMessage(FileIdJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes FileId with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FileId>): FileId {
    return {
      id: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<FileId>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: FileId, json: any): FileId {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    return msg;
  },
};

export const CreateLocalFileDtoJSON = {
  /**
   * Serializes CreateLocalFileDto to JSON.
   */
  encode: function (msg: PartialDeep<CreateLocalFileDto>): string {
    return JSON.stringify(CreateLocalFileDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateLocalFileDto from JSON.
   */
  decode: function (json: string): CreateLocalFileDto {
    return CreateLocalFileDtoJSON._readMessage(
      CreateLocalFileDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateLocalFileDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateLocalFileDto>): CreateLocalFileDto {
    return {
      filename: "",
      path: "",
      mimetype: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateLocalFileDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.filename) {
      json["filename"] = msg.filename;
    }
    if (msg.path) {
      json["path"] = msg.path;
    }
    if (msg.mimetype) {
      json["mimetype"] = msg.mimetype;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateLocalFileDto,
    json: any,
  ): CreateLocalFileDto {
    const _filename_ = json["filename"];
    if (_filename_) {
      msg.filename = _filename_;
    }
    const _path_ = json["path"];
    if (_path_) {
      msg.path = _path_;
    }
    const _mimetype_ = json["mimetype"];
    if (_mimetype_) {
      msg.mimetype = _mimetype_;
    }
    return msg;
  },
};

export const LocalFileDtoJSON = {
  /**
   * Serializes LocalFileDto to JSON.
   */
  encode: function (msg: PartialDeep<LocalFileDto>): string {
    return JSON.stringify(LocalFileDtoJSON._writeMessage(msg));
  },

  /**
   * Deserializes LocalFileDto from JSON.
   */
  decode: function (json: string): LocalFileDto {
    return LocalFileDtoJSON._readMessage(
      LocalFileDtoJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes LocalFileDto with all fields set to their default value.
   */
  initialize: function (msg?: Partial<LocalFileDto>): LocalFileDto {
    return {
      id: "",
      filename: "",
      path: "",
      mimetype: "",
      createdAt: "",
      updatedAt: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<LocalFileDto>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.filename) {
      json["filename"] = msg.filename;
    }
    if (msg.path) {
      json["path"] = msg.path;
    }
    if (msg.mimetype) {
      json["mimetype"] = msg.mimetype;
    }
    if (msg.createdAt) {
      json["createdAt"] = msg.createdAt;
    }
    if (msg.updatedAt) {
      json["updatedAt"] = msg.updatedAt;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: LocalFileDto, json: any): LocalFileDto {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _filename_ = json["filename"];
    if (_filename_) {
      msg.filename = _filename_;
    }
    const _path_ = json["path"];
    if (_path_) {
      msg.path = _path_;
    }
    const _mimetype_ = json["mimetype"];
    if (_mimetype_) {
      msg.mimetype = _mimetype_;
    }
    const _createdAt_ = json["createdAt"] ?? json["created_at"];
    if (_createdAt_) {
      msg.createdAt = _createdAt_;
    }
    const _updatedAt_ = json["updatedAt"] ?? json["updated_at"];
    if (_updatedAt_) {
      msg.updatedAt = _updatedAt_;
    }
    return msg;
  },
};
